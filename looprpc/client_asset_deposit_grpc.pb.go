// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package looprpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetDepositClientClient is the client API for AssetDepositClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetDepositClientClient interface {
	NewAssetDeposit(ctx context.Context, in *NewAssetDepositRequest, opts ...grpc.CallOption) (*NewAssetDepositResponse, error)
	ListAssetDeposits(ctx context.Context, in *ListAssetDepositsRequest, opts ...grpc.CallOption) (*ListAssetDepositsResponse, error)
	WithdrawAssetDeposits(ctx context.Context, in *WithdrawAssetDepositsRequest, opts ...grpc.CallOption) (*WithdrawAssetDepositsResponse, error)
	RevealAssetDepositKey(ctx context.Context, in *RevealAssetDepositKeyRequest, opts ...grpc.CallOption) (*RevealAssetDepositKeyResponse, error)
	TestCoSignAssetDepositHTLC(ctx context.Context, in *TestCoSignAssetDepositHTLCRequest, opts ...grpc.CallOption) (*TestCoSignAssetDepositHTLCResponse, error)
}

type assetDepositClientClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetDepositClientClient(cc grpc.ClientConnInterface) AssetDepositClientClient {
	return &assetDepositClientClient{cc}
}

func (c *assetDepositClientClient) NewAssetDeposit(ctx context.Context, in *NewAssetDepositRequest, opts ...grpc.CallOption) (*NewAssetDepositResponse, error) {
	out := new(NewAssetDepositResponse)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositClient/NewAssetDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetDepositClientClient) ListAssetDeposits(ctx context.Context, in *ListAssetDepositsRequest, opts ...grpc.CallOption) (*ListAssetDepositsResponse, error) {
	out := new(ListAssetDepositsResponse)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositClient/ListAssetDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetDepositClientClient) WithdrawAssetDeposits(ctx context.Context, in *WithdrawAssetDepositsRequest, opts ...grpc.CallOption) (*WithdrawAssetDepositsResponse, error) {
	out := new(WithdrawAssetDepositsResponse)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositClient/WithdrawAssetDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetDepositClientClient) RevealAssetDepositKey(ctx context.Context, in *RevealAssetDepositKeyRequest, opts ...grpc.CallOption) (*RevealAssetDepositKeyResponse, error) {
	out := new(RevealAssetDepositKeyResponse)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositClient/RevealAssetDepositKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetDepositClientClient) TestCoSignAssetDepositHTLC(ctx context.Context, in *TestCoSignAssetDepositHTLCRequest, opts ...grpc.CallOption) (*TestCoSignAssetDepositHTLCResponse, error) {
	out := new(TestCoSignAssetDepositHTLCResponse)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositClient/TestCoSignAssetDepositHTLC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetDepositClientServer is the server API for AssetDepositClient service.
// All implementations must embed UnimplementedAssetDepositClientServer
// for forward compatibility
type AssetDepositClientServer interface {
	NewAssetDeposit(context.Context, *NewAssetDepositRequest) (*NewAssetDepositResponse, error)
	ListAssetDeposits(context.Context, *ListAssetDepositsRequest) (*ListAssetDepositsResponse, error)
	WithdrawAssetDeposits(context.Context, *WithdrawAssetDepositsRequest) (*WithdrawAssetDepositsResponse, error)
	RevealAssetDepositKey(context.Context, *RevealAssetDepositKeyRequest) (*RevealAssetDepositKeyResponse, error)
	TestCoSignAssetDepositHTLC(context.Context, *TestCoSignAssetDepositHTLCRequest) (*TestCoSignAssetDepositHTLCResponse, error)
	mustEmbedUnimplementedAssetDepositClientServer()
}

// UnimplementedAssetDepositClientServer must be embedded to have forward compatible implementations.
type UnimplementedAssetDepositClientServer struct {
}

func (UnimplementedAssetDepositClientServer) NewAssetDeposit(context.Context, *NewAssetDepositRequest) (*NewAssetDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAssetDeposit not implemented")
}
func (UnimplementedAssetDepositClientServer) ListAssetDeposits(context.Context, *ListAssetDepositsRequest) (*ListAssetDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssetDeposits not implemented")
}
func (UnimplementedAssetDepositClientServer) WithdrawAssetDeposits(context.Context, *WithdrawAssetDepositsRequest) (*WithdrawAssetDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawAssetDeposits not implemented")
}
func (UnimplementedAssetDepositClientServer) RevealAssetDepositKey(context.Context, *RevealAssetDepositKeyRequest) (*RevealAssetDepositKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevealAssetDepositKey not implemented")
}
func (UnimplementedAssetDepositClientServer) TestCoSignAssetDepositHTLC(context.Context, *TestCoSignAssetDepositHTLCRequest) (*TestCoSignAssetDepositHTLCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCoSignAssetDepositHTLC not implemented")
}
func (UnimplementedAssetDepositClientServer) mustEmbedUnimplementedAssetDepositClientServer() {}

// UnsafeAssetDepositClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetDepositClientServer will
// result in compilation errors.
type UnsafeAssetDepositClientServer interface {
	mustEmbedUnimplementedAssetDepositClientServer()
}

func RegisterAssetDepositClientServer(s grpc.ServiceRegistrar, srv AssetDepositClientServer) {
	s.RegisterService(&AssetDepositClient_ServiceDesc, srv)
}

func _AssetDepositClient_NewAssetDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAssetDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositClientServer).NewAssetDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositClient/NewAssetDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositClientServer).NewAssetDeposit(ctx, req.(*NewAssetDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetDepositClient_ListAssetDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositClientServer).ListAssetDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositClient/ListAssetDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositClientServer).ListAssetDeposits(ctx, req.(*ListAssetDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetDepositClient_WithdrawAssetDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawAssetDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositClientServer).WithdrawAssetDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositClient/WithdrawAssetDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositClientServer).WithdrawAssetDeposits(ctx, req.(*WithdrawAssetDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetDepositClient_RevealAssetDepositKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevealAssetDepositKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositClientServer).RevealAssetDepositKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositClient/RevealAssetDepositKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositClientServer).RevealAssetDepositKey(ctx, req.(*RevealAssetDepositKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetDepositClient_TestCoSignAssetDepositHTLC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCoSignAssetDepositHTLCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositClientServer).TestCoSignAssetDepositHTLC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositClient/TestCoSignAssetDepositHTLC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositClientServer).TestCoSignAssetDepositHTLC(ctx, req.(*TestCoSignAssetDepositHTLCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetDepositClient_ServiceDesc is the grpc.ServiceDesc for AssetDepositClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetDepositClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "looprpc.AssetDepositClient",
	HandlerType: (*AssetDepositClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAssetDeposit",
			Handler:    _AssetDepositClient_NewAssetDeposit_Handler,
		},
		{
			MethodName: "ListAssetDeposits",
			Handler:    _AssetDepositClient_ListAssetDeposits_Handler,
		},
		{
			MethodName: "WithdrawAssetDeposits",
			Handler:    _AssetDepositClient_WithdrawAssetDeposits_Handler,
		},
		{
			MethodName: "RevealAssetDepositKey",
			Handler:    _AssetDepositClient_RevealAssetDepositKey_Handler,
		},
		{
			MethodName: "TestCoSignAssetDepositHTLC",
			Handler:    _AssetDepositClient_TestCoSignAssetDepositHTLC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_asset_deposit.proto",
}
