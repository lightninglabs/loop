// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: asset_swaps.sql

package sqlc

import (
	"context"
	"time"
)

const createAssetOutSwap = `-- name: CreateAssetOutSwap :exec
INSERT INTO asset_out_swaps (
    swap_hash
) VALUES (
    $1
)
`

func (q *Queries) CreateAssetOutSwap(ctx context.Context, swapHash []byte) error {
	_, err := q.db.ExecContext(ctx, createAssetOutSwap, swapHash)
	return err
}

const createAssetSwap = `-- name: CreateAssetSwap :exec
    INSERT INTO asset_swaps(
        swap_hash,
        swap_preimage,
        asset_id,
        amt,
        sender_pubkey,
        receiver_pubkey,
        csv_expiry,
        initiation_height,
        created_time,
        server_key_family,
        server_key_index
    )
    VALUES
    (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
    )
`

type CreateAssetSwapParams struct {
	SwapHash         []byte
	SwapPreimage     []byte
	AssetID          []byte
	Amt              int64
	SenderPubkey     []byte
	ReceiverPubkey   []byte
	CsvExpiry        int32
	InitiationHeight int32
	CreatedTime      time.Time
	ServerKeyFamily  int64
	ServerKeyIndex   int64
}

func (q *Queries) CreateAssetSwap(ctx context.Context, arg CreateAssetSwapParams) error {
	_, err := q.db.ExecContext(ctx, createAssetSwap,
		arg.SwapHash,
		arg.SwapPreimage,
		arg.AssetID,
		arg.Amt,
		arg.SenderPubkey,
		arg.ReceiverPubkey,
		arg.CsvExpiry,
		arg.InitiationHeight,
		arg.CreatedTime,
		arg.ServerKeyFamily,
		arg.ServerKeyIndex,
	)
	return err
}

const getAllAssetOutSwaps = `-- name: GetAllAssetOutSwaps :many
SELECT DISTINCT
    asw.id, asw.swap_hash, asw.swap_preimage, asw.asset_id, asw.amt, asw.sender_pubkey, asw.receiver_pubkey, asw.csv_expiry, asw.server_key_family, asw.server_key_index, asw.initiation_height, asw.created_time, asw.htlc_confirmation_height, asw.htlc_txid, asw.htlc_vout, asw.sweep_txid, asw.sweep_confirmation_height, asw.sweep_pkscript,
    aos.swap_hash, aos.raw_proof_file,
    asu.update_state
FROM
    asset_swaps asw
INNER JOIN (
    SELECT
        swap_hash,
        update_state,
        ROW_NUMBER() OVER(PARTITION BY swap_hash ORDER BY id DESC) as rn
    FROM
        asset_swaps_updates
) asu ON asw.swap_hash = asu.swap_hash AND asu.rn = 1
INNER JOIN asset_out_swaps aos ON asw.swap_hash = aos.swap_hash
ORDER BY
    asw.id
`

type GetAllAssetOutSwapsRow struct {
	AssetSwap    AssetSwap
	AssetOutSwap AssetOutSwap
	UpdateState  string
}

func (q *Queries) GetAllAssetOutSwaps(ctx context.Context) ([]GetAllAssetOutSwapsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAssetOutSwaps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAssetOutSwapsRow
	for rows.Next() {
		var i GetAllAssetOutSwapsRow
		if err := rows.Scan(
			&i.AssetSwap.ID,
			&i.AssetSwap.SwapHash,
			&i.AssetSwap.SwapPreimage,
			&i.AssetSwap.AssetID,
			&i.AssetSwap.Amt,
			&i.AssetSwap.SenderPubkey,
			&i.AssetSwap.ReceiverPubkey,
			&i.AssetSwap.CsvExpiry,
			&i.AssetSwap.ServerKeyFamily,
			&i.AssetSwap.ServerKeyIndex,
			&i.AssetSwap.InitiationHeight,
			&i.AssetSwap.CreatedTime,
			&i.AssetSwap.HtlcConfirmationHeight,
			&i.AssetSwap.HtlcTxid,
			&i.AssetSwap.HtlcVout,
			&i.AssetSwap.SweepTxid,
			&i.AssetSwap.SweepConfirmationHeight,
			&i.AssetSwap.SweepPkscript,
			&i.AssetOutSwap.SwapHash,
			&i.AssetOutSwap.RawProofFile,
			&i.UpdateState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssetOutSwap = `-- name: GetAssetOutSwap :one
SELECT DISTINCT
    asw.id, asw.swap_hash, asw.swap_preimage, asw.asset_id, asw.amt, asw.sender_pubkey, asw.receiver_pubkey, asw.csv_expiry, asw.server_key_family, asw.server_key_index, asw.initiation_height, asw.created_time, asw.htlc_confirmation_height, asw.htlc_txid, asw.htlc_vout, asw.sweep_txid, asw.sweep_confirmation_height, asw.sweep_pkscript,
    aos.swap_hash, aos.raw_proof_file,
    asu.update_state
FROM
    asset_swaps asw
INNER JOIN (
    SELECT
        swap_hash,
        update_state,
        ROW_NUMBER() OVER(PARTITION BY swap_hash ORDER BY id DESC) as rn
    FROM
        asset_swaps_updates
) asu ON asw.swap_hash = asu.swap_hash AND asu.rn = 1
INNER JOIN asset_out_swaps aos ON asw.swap_hash = aos.swap_hash
WHERE
    asw.swap_hash = $1
`

type GetAssetOutSwapRow struct {
	AssetSwap    AssetSwap
	AssetOutSwap AssetOutSwap
	UpdateState  string
}

func (q *Queries) GetAssetOutSwap(ctx context.Context, swapHash []byte) (GetAssetOutSwapRow, error) {
	row := q.db.QueryRowContext(ctx, getAssetOutSwap, swapHash)
	var i GetAssetOutSwapRow
	err := row.Scan(
		&i.AssetSwap.ID,
		&i.AssetSwap.SwapHash,
		&i.AssetSwap.SwapPreimage,
		&i.AssetSwap.AssetID,
		&i.AssetSwap.Amt,
		&i.AssetSwap.SenderPubkey,
		&i.AssetSwap.ReceiverPubkey,
		&i.AssetSwap.CsvExpiry,
		&i.AssetSwap.ServerKeyFamily,
		&i.AssetSwap.ServerKeyIndex,
		&i.AssetSwap.InitiationHeight,
		&i.AssetSwap.CreatedTime,
		&i.AssetSwap.HtlcConfirmationHeight,
		&i.AssetSwap.HtlcTxid,
		&i.AssetSwap.HtlcVout,
		&i.AssetSwap.SweepTxid,
		&i.AssetSwap.SweepConfirmationHeight,
		&i.AssetSwap.SweepPkscript,
		&i.AssetOutSwap.SwapHash,
		&i.AssetOutSwap.RawProofFile,
		&i.UpdateState,
	)
	return i, err
}

const insertAssetSwapUpdate = `-- name: InsertAssetSwapUpdate :exec
INSERT INTO asset_swaps_updates (
        swap_hash,
        update_state,
        update_timestamp
) VALUES (
        $1,
        $2,
        $3
)
`

type InsertAssetSwapUpdateParams struct {
	SwapHash        []byte
	UpdateState     string
	UpdateTimestamp time.Time
}

func (q *Queries) InsertAssetSwapUpdate(ctx context.Context, arg InsertAssetSwapUpdateParams) error {
	_, err := q.db.ExecContext(ctx, insertAssetSwapUpdate, arg.SwapHash, arg.UpdateState, arg.UpdateTimestamp)
	return err
}

const updateAssetSwapHtlcTx = `-- name: UpdateAssetSwapHtlcTx :exec
UPDATE asset_swaps
SET
        htlc_confirmation_height = $2,
        htlc_txid = $3,
        htlc_vout = $4
WHERE
        asset_swaps.swap_hash = $1
`

type UpdateAssetSwapHtlcTxParams struct {
	SwapHash               []byte
	HtlcConfirmationHeight int32
	HtlcTxid               []byte
	HtlcVout               int32
}

func (q *Queries) UpdateAssetSwapHtlcTx(ctx context.Context, arg UpdateAssetSwapHtlcTxParams) error {
	_, err := q.db.ExecContext(ctx, updateAssetSwapHtlcTx,
		arg.SwapHash,
		arg.HtlcConfirmationHeight,
		arg.HtlcTxid,
		arg.HtlcVout,
	)
	return err
}

const updateAssetSwapOutPreimage = `-- name: UpdateAssetSwapOutPreimage :exec
UPDATE asset_swaps
SET
        swap_preimage = $2
WHERE
        asset_swaps.swap_hash = $1
`

type UpdateAssetSwapOutPreimageParams struct {
	SwapHash     []byte
	SwapPreimage []byte
}

func (q *Queries) UpdateAssetSwapOutPreimage(ctx context.Context, arg UpdateAssetSwapOutPreimageParams) error {
	_, err := q.db.ExecContext(ctx, updateAssetSwapOutPreimage, arg.SwapHash, arg.SwapPreimage)
	return err
}

const updateAssetSwapOutProof = `-- name: UpdateAssetSwapOutProof :exec
UPDATE asset_out_swaps
SET 
        raw_proof_file = $2
WHERE
        asset_out_swaps.swap_hash = $1
`

type UpdateAssetSwapOutProofParams struct {
	SwapHash     []byte
	RawProofFile []byte
}

func (q *Queries) UpdateAssetSwapOutProof(ctx context.Context, arg UpdateAssetSwapOutProofParams) error {
	_, err := q.db.ExecContext(ctx, updateAssetSwapOutProof, arg.SwapHash, arg.RawProofFile)
	return err
}

const updateAssetSwapSweepTx = `-- name: UpdateAssetSwapSweepTx :exec
UPDATE asset_swaps
SET
        sweep_confirmation_height = $2,
        sweep_txid = $3,
        sweep_pkscript = $4
WHERE
        asset_swaps.swap_hash = $1
`

type UpdateAssetSwapSweepTxParams struct {
	SwapHash                []byte
	SweepConfirmationHeight int32
	SweepTxid               []byte
	SweepPkscript           []byte
}

func (q *Queries) UpdateAssetSwapSweepTx(ctx context.Context, arg UpdateAssetSwapSweepTxParams) error {
	_, err := q.db.ExecContext(ctx, updateAssetSwapSweepTx,
		arg.SwapHash,
		arg.SweepConfirmationHeight,
		arg.SweepTxid,
		arg.SweepPkscript,
	)
	return err
}
