// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: asset_deposits.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const addAssetDeposit = `-- name: AddAssetDeposit :exec
INSERT INTO asset_deposits (
    deposit_id,
    protocol_version,
    created_at,
    asset_id,
    amount,
    client_script_pubkey,
    server_script_pubkey,
    client_internal_pubkey,
    server_internal_pubkey,
    server_internal_key,
    client_key_family,
    client_key_index,
    expiry,
    addr
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
`

type AddAssetDepositParams struct {
	DepositID            string
	ProtocolVersion      int32
	CreatedAt            time.Time
	AssetID              []byte
	Amount               int64
	ClientScriptPubkey   []byte
	ServerScriptPubkey   []byte
	ClientInternalPubkey []byte
	ServerInternalPubkey []byte
	ServerInternalKey    []byte
	ClientKeyFamily      int32
	ClientKeyIndex       int32
	Expiry               int32
	Addr                 string
}

func (q *Queries) AddAssetDeposit(ctx context.Context, arg AddAssetDepositParams) error {
	_, err := q.db.ExecContext(ctx, addAssetDeposit,
		arg.DepositID,
		arg.ProtocolVersion,
		arg.CreatedAt,
		arg.AssetID,
		arg.Amount,
		arg.ClientScriptPubkey,
		arg.ServerScriptPubkey,
		arg.ClientInternalPubkey,
		arg.ServerInternalPubkey,
		arg.ServerInternalKey,
		arg.ClientKeyFamily,
		arg.ClientKeyIndex,
		arg.Expiry,
		arg.Addr,
	)
	return err
}

const markDepositConfirmed = `-- name: MarkDepositConfirmed :exec
UPDATE asset_deposits 
SET confirmation_height = $2, outpoint = $3, pk_script = $4
WHERE deposit_id = $1
`

type MarkDepositConfirmedParams struct {
	DepositID          string
	ConfirmationHeight sql.NullInt32
	Outpoint           sql.NullString
	PkScript           []byte
}

func (q *Queries) MarkDepositConfirmed(ctx context.Context, arg MarkDepositConfirmedParams) error {
	_, err := q.db.ExecContext(ctx, markDepositConfirmed,
		arg.DepositID,
		arg.ConfirmationHeight,
		arg.Outpoint,
		arg.PkScript,
	)
	return err
}

const updateDepositState = `-- name: UpdateDepositState :exec
INSERT INTO asset_deposit_updates (
    deposit_id,
    update_state,
    update_timestamp
) VALUES ($1, $2, $3)
`

type UpdateDepositStateParams struct {
	DepositID       string
	UpdateState     int32
	UpdateTimestamp time.Time
}

func (q *Queries) UpdateDepositState(ctx context.Context, arg UpdateDepositStateParams) error {
	_, err := q.db.ExecContext(ctx, updateDepositState, arg.DepositID, arg.UpdateState, arg.UpdateTimestamp)
	return err
}
