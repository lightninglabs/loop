// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: asset_deposits.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const addAssetDeposit = `-- name: AddAssetDeposit :exec
INSERT INTO asset_deposits (
    deposit_id,
    protocol_version,
    created_at,
    asset_id,
    amount,
    client_script_pubkey,
    server_script_pubkey,
    client_internal_pubkey,
    server_internal_pubkey,
    server_internal_key,
    client_key_family,
    client_key_index,
    expiry,
    addr
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
`

type AddAssetDepositParams struct {
	DepositID            string
	ProtocolVersion      int32
	CreatedAt            time.Time
	AssetID              []byte
	Amount               int64
	ClientScriptPubkey   []byte
	ServerScriptPubkey   []byte
	ClientInternalPubkey []byte
	ServerInternalPubkey []byte
	ServerInternalKey    []byte
	ClientKeyFamily      int32
	ClientKeyIndex       int32
	Expiry               int32
	Addr                 string
}

func (q *Queries) AddAssetDeposit(ctx context.Context, arg AddAssetDepositParams) error {
	_, err := q.db.ExecContext(ctx, addAssetDeposit,
		arg.DepositID,
		arg.ProtocolVersion,
		arg.CreatedAt,
		arg.AssetID,
		arg.Amount,
		arg.ClientScriptPubkey,
		arg.ServerScriptPubkey,
		arg.ClientInternalPubkey,
		arg.ServerInternalPubkey,
		arg.ServerInternalKey,
		arg.ClientKeyFamily,
		arg.ClientKeyIndex,
		arg.Expiry,
		arg.Addr,
	)
	return err
}

const getActiveAssetDeposits = `-- name: GetActiveAssetDeposits :many
SELECT d.deposit_id, d.protocol_version, d.created_at, d.asset_id, d.amount, d.client_script_pubkey, d.server_script_pubkey, d.client_internal_pubkey, d.server_internal_pubkey, d.server_internal_key, d.expiry, d.client_key_family, d.client_key_index, d.addr, d.confirmation_height, d.outpoint, d.pk_script, d.sweep_addr, u.update_state, u.update_timestamp
FROM asset_deposits d
JOIN asset_deposit_updates u
  ON u.deposit_id = d.deposit_id
WHERE u.id = (
    SELECT id
    FROM asset_deposit_updates
    WHERE deposit_id = d.deposit_id
    ORDER BY update_timestamp DESC
    LIMIT 1
)
AND u.update_state IN (0, 1, 2, 3, 4, 5, 6)
`

type GetActiveAssetDepositsRow struct {
	DepositID            string
	ProtocolVersion      int32
	CreatedAt            time.Time
	AssetID              []byte
	Amount               int64
	ClientScriptPubkey   []byte
	ServerScriptPubkey   []byte
	ClientInternalPubkey []byte
	ServerInternalPubkey []byte
	ServerInternalKey    []byte
	Expiry               int32
	ClientKeyFamily      int32
	ClientKeyIndex       int32
	Addr                 string
	ConfirmationHeight   sql.NullInt32
	Outpoint             sql.NullString
	PkScript             []byte
	SweepAddr            sql.NullString
	UpdateState          int32
	UpdateTimestamp      time.Time
}

func (q *Queries) GetActiveAssetDeposits(ctx context.Context) ([]GetActiveAssetDepositsRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveAssetDeposits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveAssetDepositsRow
	for rows.Next() {
		var i GetActiveAssetDepositsRow
		if err := rows.Scan(
			&i.DepositID,
			&i.ProtocolVersion,
			&i.CreatedAt,
			&i.AssetID,
			&i.Amount,
			&i.ClientScriptPubkey,
			&i.ServerScriptPubkey,
			&i.ClientInternalPubkey,
			&i.ServerInternalPubkey,
			&i.ServerInternalKey,
			&i.Expiry,
			&i.ClientKeyFamily,
			&i.ClientKeyIndex,
			&i.Addr,
			&i.ConfirmationHeight,
			&i.Outpoint,
			&i.PkScript,
			&i.SweepAddr,
			&i.UpdateState,
			&i.UpdateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssetDeposits = `-- name: GetAssetDeposits :many
SELECT d.deposit_id, d.protocol_version, d.created_at, d.asset_id, d.amount, d.client_script_pubkey, d.server_script_pubkey, d.client_internal_pubkey, d.server_internal_pubkey, d.server_internal_key, d.expiry, d.client_key_family, d.client_key_index, d.addr, d.confirmation_height, d.outpoint, d.pk_script, d.sweep_addr, u.update_state, u.update_timestamp
FROM asset_deposits d
JOIN asset_deposit_updates u ON u.id = (
    SELECT id
    FROM asset_deposit_updates
    WHERE deposit_id = d.deposit_id
    ORDER BY update_timestamp DESC
    LIMIT 1
)
ORDER BY d.created_at ASC
`

type GetAssetDepositsRow struct {
	DepositID            string
	ProtocolVersion      int32
	CreatedAt            time.Time
	AssetID              []byte
	Amount               int64
	ClientScriptPubkey   []byte
	ServerScriptPubkey   []byte
	ClientInternalPubkey []byte
	ServerInternalPubkey []byte
	ServerInternalKey    []byte
	Expiry               int32
	ClientKeyFamily      int32
	ClientKeyIndex       int32
	Addr                 string
	ConfirmationHeight   sql.NullInt32
	Outpoint             sql.NullString
	PkScript             []byte
	SweepAddr            sql.NullString
	UpdateState          int32
	UpdateTimestamp      time.Time
}

func (q *Queries) GetAssetDeposits(ctx context.Context) ([]GetAssetDepositsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAssetDeposits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAssetDepositsRow
	for rows.Next() {
		var i GetAssetDepositsRow
		if err := rows.Scan(
			&i.DepositID,
			&i.ProtocolVersion,
			&i.CreatedAt,
			&i.AssetID,
			&i.Amount,
			&i.ClientScriptPubkey,
			&i.ServerScriptPubkey,
			&i.ClientInternalPubkey,
			&i.ServerInternalPubkey,
			&i.ServerInternalKey,
			&i.Expiry,
			&i.ClientKeyFamily,
			&i.ClientKeyIndex,
			&i.Addr,
			&i.ConfirmationHeight,
			&i.Outpoint,
			&i.PkScript,
			&i.SweepAddr,
			&i.UpdateState,
			&i.UpdateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markDepositConfirmed = `-- name: MarkDepositConfirmed :exec
UPDATE asset_deposits 
SET confirmation_height = $2, outpoint = $3, pk_script = $4
WHERE deposit_id = $1
`

type MarkDepositConfirmedParams struct {
	DepositID          string
	ConfirmationHeight sql.NullInt32
	Outpoint           sql.NullString
	PkScript           []byte
}

func (q *Queries) MarkDepositConfirmed(ctx context.Context, arg MarkDepositConfirmedParams) error {
	_, err := q.db.ExecContext(ctx, markDepositConfirmed,
		arg.DepositID,
		arg.ConfirmationHeight,
		arg.Outpoint,
		arg.PkScript,
	)
	return err
}

const setAssetDepositServerInternalKey = `-- name: SetAssetDepositServerInternalKey :exec
UPDATE asset_deposits
SET server_internal_key = $2
WHERE deposit_id = $1
AND server_internal_key IS NULL
`

type SetAssetDepositServerInternalKeyParams struct {
	DepositID         string
	ServerInternalKey []byte
}

func (q *Queries) SetAssetDepositServerInternalKey(ctx context.Context, arg SetAssetDepositServerInternalKeyParams) error {
	_, err := q.db.ExecContext(ctx, setAssetDepositServerInternalKey, arg.DepositID, arg.ServerInternalKey)
	return err
}

const setAssetDepositSweepAddr = `-- name: SetAssetDepositSweepAddr :exec
UPDATE asset_deposits
SET sweep_addr = $2
WHERE deposit_id = $1
`

type SetAssetDepositSweepAddrParams struct {
	DepositID string
	SweepAddr sql.NullString
}

func (q *Queries) SetAssetDepositSweepAddr(ctx context.Context, arg SetAssetDepositSweepAddrParams) error {
	_, err := q.db.ExecContext(ctx, setAssetDepositSweepAddr, arg.DepositID, arg.SweepAddr)
	return err
}

const updateDepositState = `-- name: UpdateDepositState :exec
INSERT INTO asset_deposit_updates (
    deposit_id,
    update_state,
    update_timestamp
) VALUES ($1, $2, $3)
`

type UpdateDepositStateParams struct {
	DepositID       string
	UpdateState     int32
	UpdateTimestamp time.Time
}

func (q *Queries) UpdateDepositState(ctx context.Context, arg UpdateDepositStateParams) error {
	_, err := q.db.ExecContext(ctx, updateDepositState, arg.DepositID, arg.UpdateState, arg.UpdateTimestamp)
	return err
}
