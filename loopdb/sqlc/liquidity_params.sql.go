// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: liquidity_params.sql

package sqlc

import (
	"context"
)

const fetchLiquidityParams = `-- name: FetchLiquidityParams :many
SELECT asset_id, params FROM liquidity_params
`

func (q *Queries) FetchLiquidityParams(ctx context.Context) ([]LiquidityParam, error) {
	rows, err := q.db.QueryContext(ctx, fetchLiquidityParams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LiquidityParam
	for rows.Next() {
		var i LiquidityParam
		if err := rows.Scan(&i.AssetID, &i.Params); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertLiquidityParams = `-- name: UpsertLiquidityParams :exec
INSERT INTO liquidity_params (
    asset_id, params
) VALUES (
    $1, $2
) ON CONFLICT (asset_id) DO UPDATE SET
    params = $2
`

type UpsertLiquidityParamsParams struct {
	AssetID string
	Params  []byte
}

func (q *Queries) UpsertLiquidityParams(ctx context.Context, arg UpsertLiquidityParamsParams) error {
	_, err := q.db.ExecContext(ctx, upsertLiquidityParams, arg.AssetID, arg.Params)
	return err
}
