// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package swapserverrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HyperloopServerClient is the client API for HyperloopServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HyperloopServerClient interface {
	HyperloopNotificationStream(ctx context.Context, in *HyperloopNotificationStreamRequest, opts ...grpc.CallOption) (HyperloopServer_HyperloopNotificationStreamClient, error)
	GetPendingHyperloop(ctx context.Context, in *GetPendingHyperloopRequest, opts ...grpc.CallOption) (*GetPendingHyperloopResponse, error)
	RegisterHyperloop(ctx context.Context, in *RegisterHyperloopRequest, opts ...grpc.CallOption) (*RegisterHyperloopResponse, error)
	FetchHyperloopHtlcFeeRates(ctx context.Context, in *FetchHyperloopHtlcFeeRatesRequest, opts ...grpc.CallOption) (*FetchHyperloopHtlcFeeRatesResponse, error)
	FetchHyperloopParticipants(ctx context.Context, in *FetchHyperloopParticipantsRequest, opts ...grpc.CallOption) (*FetchHyperloopParticipantsResponse, error)
	PushHyperloopHtlcNonces(ctx context.Context, in *PushHyperloopHtlcNoncesRequest, opts ...grpc.CallOption) (*PushHyperloopHtlcNoncesResponse, error)
	FetchHyperloopHtlcNonces(ctx context.Context, in *FetchHyperloopHtlcNoncesRequest, opts ...grpc.CallOption) (*FetchHyperloopHtlcNoncesResponse, error)
	PushHyperloopHtlcSigs(ctx context.Context, in *PushHyperloopHtlcSigRequest, opts ...grpc.CallOption) (*PushHyperloopHtlcSigResponse, error)
	FetchHyperloopHtlcSigs(ctx context.Context, in *FetchHyperloopHtlcSigRequest, opts ...grpc.CallOption) (*FetchHyperloopHtlcSigResponse, error)
	PushHyperloopPreimage(ctx context.Context, in *PushHyperloopPreimageRequest, opts ...grpc.CallOption) (*PushHyperloopPreimageResponse, error)
	FetchHyperloopSweeplessSweepNonce(ctx context.Context, in *FetchHyperloopSweeplessSweepNonceRequest, opts ...grpc.CallOption) (*FetchHyperloopSweeplessSweepNonceResponse, error)
	PushHyperloopSweeplessSweepSig(ctx context.Context, in *PushHyperloopSweeplessSweepSigRequest, opts ...grpc.CallOption) (*PushHyperloopSweeplessSweepSigResponse, error)
}

type hyperloopServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHyperloopServerClient(cc grpc.ClientConnInterface) HyperloopServerClient {
	return &hyperloopServerClient{cc}
}

func (c *hyperloopServerClient) HyperloopNotificationStream(ctx context.Context, in *HyperloopNotificationStreamRequest, opts ...grpc.CallOption) (HyperloopServer_HyperloopNotificationStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HyperloopServer_ServiceDesc.Streams[0], "/looprpc.HyperloopServer/HyperloopNotificationStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hyperloopServerHyperloopNotificationStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HyperloopServer_HyperloopNotificationStreamClient interface {
	Recv() (*HyperloopNotificationStreamResponse, error)
	grpc.ClientStream
}

type hyperloopServerHyperloopNotificationStreamClient struct {
	grpc.ClientStream
}

func (x *hyperloopServerHyperloopNotificationStreamClient) Recv() (*HyperloopNotificationStreamResponse, error) {
	m := new(HyperloopNotificationStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hyperloopServerClient) GetPendingHyperloop(ctx context.Context, in *GetPendingHyperloopRequest, opts ...grpc.CallOption) (*GetPendingHyperloopResponse, error) {
	out := new(GetPendingHyperloopResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/GetPendingHyperloop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) RegisterHyperloop(ctx context.Context, in *RegisterHyperloopRequest, opts ...grpc.CallOption) (*RegisterHyperloopResponse, error) {
	out := new(RegisterHyperloopResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/RegisterHyperloop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) FetchHyperloopHtlcFeeRates(ctx context.Context, in *FetchHyperloopHtlcFeeRatesRequest, opts ...grpc.CallOption) (*FetchHyperloopHtlcFeeRatesResponse, error) {
	out := new(FetchHyperloopHtlcFeeRatesResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/FetchHyperloopHtlcFeeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) FetchHyperloopParticipants(ctx context.Context, in *FetchHyperloopParticipantsRequest, opts ...grpc.CallOption) (*FetchHyperloopParticipantsResponse, error) {
	out := new(FetchHyperloopParticipantsResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/FetchHyperloopParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) PushHyperloopHtlcNonces(ctx context.Context, in *PushHyperloopHtlcNoncesRequest, opts ...grpc.CallOption) (*PushHyperloopHtlcNoncesResponse, error) {
	out := new(PushHyperloopHtlcNoncesResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/PushHyperloopHtlcNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) FetchHyperloopHtlcNonces(ctx context.Context, in *FetchHyperloopHtlcNoncesRequest, opts ...grpc.CallOption) (*FetchHyperloopHtlcNoncesResponse, error) {
	out := new(FetchHyperloopHtlcNoncesResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/FetchHyperloopHtlcNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) PushHyperloopHtlcSigs(ctx context.Context, in *PushHyperloopHtlcSigRequest, opts ...grpc.CallOption) (*PushHyperloopHtlcSigResponse, error) {
	out := new(PushHyperloopHtlcSigResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/PushHyperloopHtlcSigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) FetchHyperloopHtlcSigs(ctx context.Context, in *FetchHyperloopHtlcSigRequest, opts ...grpc.CallOption) (*FetchHyperloopHtlcSigResponse, error) {
	out := new(FetchHyperloopHtlcSigResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/FetchHyperloopHtlcSigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) PushHyperloopPreimage(ctx context.Context, in *PushHyperloopPreimageRequest, opts ...grpc.CallOption) (*PushHyperloopPreimageResponse, error) {
	out := new(PushHyperloopPreimageResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/PushHyperloopPreimage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) FetchHyperloopSweeplessSweepNonce(ctx context.Context, in *FetchHyperloopSweeplessSweepNonceRequest, opts ...grpc.CallOption) (*FetchHyperloopSweeplessSweepNonceResponse, error) {
	out := new(FetchHyperloopSweeplessSweepNonceResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/FetchHyperloopSweeplessSweepNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperloopServerClient) PushHyperloopSweeplessSweepSig(ctx context.Context, in *PushHyperloopSweeplessSweepSigRequest, opts ...grpc.CallOption) (*PushHyperloopSweeplessSweepSigResponse, error) {
	out := new(PushHyperloopSweeplessSweepSigResponse)
	err := c.cc.Invoke(ctx, "/looprpc.HyperloopServer/PushHyperloopSweeplessSweepSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyperloopServerServer is the server API for HyperloopServer service.
// All implementations must embed UnimplementedHyperloopServerServer
// for forward compatibility
type HyperloopServerServer interface {
	HyperloopNotificationStream(*HyperloopNotificationStreamRequest, HyperloopServer_HyperloopNotificationStreamServer) error
	GetPendingHyperloop(context.Context, *GetPendingHyperloopRequest) (*GetPendingHyperloopResponse, error)
	RegisterHyperloop(context.Context, *RegisterHyperloopRequest) (*RegisterHyperloopResponse, error)
	FetchHyperloopHtlcFeeRates(context.Context, *FetchHyperloopHtlcFeeRatesRequest) (*FetchHyperloopHtlcFeeRatesResponse, error)
	FetchHyperloopParticipants(context.Context, *FetchHyperloopParticipantsRequest) (*FetchHyperloopParticipantsResponse, error)
	PushHyperloopHtlcNonces(context.Context, *PushHyperloopHtlcNoncesRequest) (*PushHyperloopHtlcNoncesResponse, error)
	FetchHyperloopHtlcNonces(context.Context, *FetchHyperloopHtlcNoncesRequest) (*FetchHyperloopHtlcNoncesResponse, error)
	PushHyperloopHtlcSigs(context.Context, *PushHyperloopHtlcSigRequest) (*PushHyperloopHtlcSigResponse, error)
	FetchHyperloopHtlcSigs(context.Context, *FetchHyperloopHtlcSigRequest) (*FetchHyperloopHtlcSigResponse, error)
	PushHyperloopPreimage(context.Context, *PushHyperloopPreimageRequest) (*PushHyperloopPreimageResponse, error)
	FetchHyperloopSweeplessSweepNonce(context.Context, *FetchHyperloopSweeplessSweepNonceRequest) (*FetchHyperloopSweeplessSweepNonceResponse, error)
	PushHyperloopSweeplessSweepSig(context.Context, *PushHyperloopSweeplessSweepSigRequest) (*PushHyperloopSweeplessSweepSigResponse, error)
	mustEmbedUnimplementedHyperloopServerServer()
}

// UnimplementedHyperloopServerServer must be embedded to have forward compatible implementations.
type UnimplementedHyperloopServerServer struct {
}

func (UnimplementedHyperloopServerServer) HyperloopNotificationStream(*HyperloopNotificationStreamRequest, HyperloopServer_HyperloopNotificationStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HyperloopNotificationStream not implemented")
}
func (UnimplementedHyperloopServerServer) GetPendingHyperloop(context.Context, *GetPendingHyperloopRequest) (*GetPendingHyperloopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingHyperloop not implemented")
}
func (UnimplementedHyperloopServerServer) RegisterHyperloop(context.Context, *RegisterHyperloopRequest) (*RegisterHyperloopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHyperloop not implemented")
}
func (UnimplementedHyperloopServerServer) FetchHyperloopHtlcFeeRates(context.Context, *FetchHyperloopHtlcFeeRatesRequest) (*FetchHyperloopHtlcFeeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchHyperloopHtlcFeeRates not implemented")
}
func (UnimplementedHyperloopServerServer) FetchHyperloopParticipants(context.Context, *FetchHyperloopParticipantsRequest) (*FetchHyperloopParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchHyperloopParticipants not implemented")
}
func (UnimplementedHyperloopServerServer) PushHyperloopHtlcNonces(context.Context, *PushHyperloopHtlcNoncesRequest) (*PushHyperloopHtlcNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHyperloopHtlcNonces not implemented")
}
func (UnimplementedHyperloopServerServer) FetchHyperloopHtlcNonces(context.Context, *FetchHyperloopHtlcNoncesRequest) (*FetchHyperloopHtlcNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchHyperloopHtlcNonces not implemented")
}
func (UnimplementedHyperloopServerServer) PushHyperloopHtlcSigs(context.Context, *PushHyperloopHtlcSigRequest) (*PushHyperloopHtlcSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHyperloopHtlcSigs not implemented")
}
func (UnimplementedHyperloopServerServer) FetchHyperloopHtlcSigs(context.Context, *FetchHyperloopHtlcSigRequest) (*FetchHyperloopHtlcSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchHyperloopHtlcSigs not implemented")
}
func (UnimplementedHyperloopServerServer) PushHyperloopPreimage(context.Context, *PushHyperloopPreimageRequest) (*PushHyperloopPreimageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHyperloopPreimage not implemented")
}
func (UnimplementedHyperloopServerServer) FetchHyperloopSweeplessSweepNonce(context.Context, *FetchHyperloopSweeplessSweepNonceRequest) (*FetchHyperloopSweeplessSweepNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchHyperloopSweeplessSweepNonce not implemented")
}
func (UnimplementedHyperloopServerServer) PushHyperloopSweeplessSweepSig(context.Context, *PushHyperloopSweeplessSweepSigRequest) (*PushHyperloopSweeplessSweepSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHyperloopSweeplessSweepSig not implemented")
}
func (UnimplementedHyperloopServerServer) mustEmbedUnimplementedHyperloopServerServer() {}

// UnsafeHyperloopServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HyperloopServerServer will
// result in compilation errors.
type UnsafeHyperloopServerServer interface {
	mustEmbedUnimplementedHyperloopServerServer()
}

func RegisterHyperloopServerServer(s grpc.ServiceRegistrar, srv HyperloopServerServer) {
	s.RegisterService(&HyperloopServer_ServiceDesc, srv)
}

func _HyperloopServer_HyperloopNotificationStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HyperloopNotificationStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperloopServerServer).HyperloopNotificationStream(m, &hyperloopServerHyperloopNotificationStreamServer{stream})
}

type HyperloopServer_HyperloopNotificationStreamServer interface {
	Send(*HyperloopNotificationStreamResponse) error
	grpc.ServerStream
}

type hyperloopServerHyperloopNotificationStreamServer struct {
	grpc.ServerStream
}

func (x *hyperloopServerHyperloopNotificationStreamServer) Send(m *HyperloopNotificationStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HyperloopServer_GetPendingHyperloop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingHyperloopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).GetPendingHyperloop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/GetPendingHyperloop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).GetPendingHyperloop(ctx, req.(*GetPendingHyperloopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_RegisterHyperloop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHyperloopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).RegisterHyperloop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/RegisterHyperloop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).RegisterHyperloop(ctx, req.(*RegisterHyperloopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_FetchHyperloopHtlcFeeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHyperloopHtlcFeeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).FetchHyperloopHtlcFeeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/FetchHyperloopHtlcFeeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).FetchHyperloopHtlcFeeRates(ctx, req.(*FetchHyperloopHtlcFeeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_FetchHyperloopParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHyperloopParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).FetchHyperloopParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/FetchHyperloopParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).FetchHyperloopParticipants(ctx, req.(*FetchHyperloopParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_PushHyperloopHtlcNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHyperloopHtlcNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).PushHyperloopHtlcNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/PushHyperloopHtlcNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).PushHyperloopHtlcNonces(ctx, req.(*PushHyperloopHtlcNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_FetchHyperloopHtlcNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHyperloopHtlcNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).FetchHyperloopHtlcNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/FetchHyperloopHtlcNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).FetchHyperloopHtlcNonces(ctx, req.(*FetchHyperloopHtlcNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_PushHyperloopHtlcSigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHyperloopHtlcSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).PushHyperloopHtlcSigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/PushHyperloopHtlcSigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).PushHyperloopHtlcSigs(ctx, req.(*PushHyperloopHtlcSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_FetchHyperloopHtlcSigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHyperloopHtlcSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).FetchHyperloopHtlcSigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/FetchHyperloopHtlcSigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).FetchHyperloopHtlcSigs(ctx, req.(*FetchHyperloopHtlcSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_PushHyperloopPreimage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHyperloopPreimageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).PushHyperloopPreimage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/PushHyperloopPreimage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).PushHyperloopPreimage(ctx, req.(*PushHyperloopPreimageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_FetchHyperloopSweeplessSweepNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHyperloopSweeplessSweepNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).FetchHyperloopSweeplessSweepNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/FetchHyperloopSweeplessSweepNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).FetchHyperloopSweeplessSweepNonce(ctx, req.(*FetchHyperloopSweeplessSweepNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperloopServer_PushHyperloopSweeplessSweepSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHyperloopSweeplessSweepSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperloopServerServer).PushHyperloopSweeplessSweepSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.HyperloopServer/PushHyperloopSweeplessSweepSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperloopServerServer).PushHyperloopSweeplessSweepSig(ctx, req.(*PushHyperloopSweeplessSweepSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HyperloopServer_ServiceDesc is the grpc.ServiceDesc for HyperloopServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HyperloopServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "looprpc.HyperloopServer",
	HandlerType: (*HyperloopServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPendingHyperloop",
			Handler:    _HyperloopServer_GetPendingHyperloop_Handler,
		},
		{
			MethodName: "RegisterHyperloop",
			Handler:    _HyperloopServer_RegisterHyperloop_Handler,
		},
		{
			MethodName: "FetchHyperloopHtlcFeeRates",
			Handler:    _HyperloopServer_FetchHyperloopHtlcFeeRates_Handler,
		},
		{
			MethodName: "FetchHyperloopParticipants",
			Handler:    _HyperloopServer_FetchHyperloopParticipants_Handler,
		},
		{
			MethodName: "PushHyperloopHtlcNonces",
			Handler:    _HyperloopServer_PushHyperloopHtlcNonces_Handler,
		},
		{
			MethodName: "FetchHyperloopHtlcNonces",
			Handler:    _HyperloopServer_FetchHyperloopHtlcNonces_Handler,
		},
		{
			MethodName: "PushHyperloopHtlcSigs",
			Handler:    _HyperloopServer_PushHyperloopHtlcSigs_Handler,
		},
		{
			MethodName: "FetchHyperloopHtlcSigs",
			Handler:    _HyperloopServer_FetchHyperloopHtlcSigs_Handler,
		},
		{
			MethodName: "PushHyperloopPreimage",
			Handler:    _HyperloopServer_PushHyperloopPreimage_Handler,
		},
		{
			MethodName: "FetchHyperloopSweeplessSweepNonce",
			Handler:    _HyperloopServer_FetchHyperloopSweeplessSweepNonce_Handler,
		},
		{
			MethodName: "PushHyperloopSweeplessSweepSig",
			Handler:    _HyperloopServer_PushHyperloopSweeplessSweepSig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HyperloopNotificationStream",
			Handler:       _HyperloopServer_HyperloopNotificationStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hyperloop.proto",
}
