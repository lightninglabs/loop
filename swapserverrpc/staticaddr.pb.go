// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: staticaddr.proto

// We can't change this to swapserverrpc, it would be a breaking change because
// the package name is also contained in the HTTP URIs and old clients would
// call the wrong endpoints. Luckily with the go_package option we can have
// different golang and RPC package names to fix protobuf namespace conflicts.

package swapserverrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StaticAddressProtocolVersion represents the static address protocol version
// the client adheres to.
type StaticAddressProtocolVersion int32

const (
	// V0 is the initially released static address protocol version.
	StaticAddressProtocolVersion_V0 StaticAddressProtocolVersion = 0
)

// Enum value maps for StaticAddressProtocolVersion.
var (
	StaticAddressProtocolVersion_name = map[int32]string{
		0: "V0",
	}
	StaticAddressProtocolVersion_value = map[string]int32{
		"V0": 0,
	}
)

func (x StaticAddressProtocolVersion) Enum() *StaticAddressProtocolVersion {
	p := new(StaticAddressProtocolVersion)
	*p = x
	return p
}

func (x StaticAddressProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticAddressProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_staticaddr_proto_enumTypes[0].Descriptor()
}

func (StaticAddressProtocolVersion) Type() protoreflect.EnumType {
	return &file_staticaddr_proto_enumTypes[0]
}

func (x StaticAddressProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticAddressProtocolVersion.Descriptor instead.
func (StaticAddressProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{0}
}

type ServerNewAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The protocol version that the client adheres to.
	ProtocolVersion StaticAddressProtocolVersion `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3,enum=looprpc.StaticAddressProtocolVersion" json:"protocol_version,omitempty"`
	// The client key for the MuSig2 static address output.
	ClientKey []byte `protobuf:"bytes,2,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (x *ServerNewAddressRequest) Reset() {
	*x = ServerNewAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNewAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNewAddressRequest) ProtoMessage() {}

func (x *ServerNewAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNewAddressRequest.ProtoReflect.Descriptor instead.
func (*ServerNewAddressRequest) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{0}
}

func (x *ServerNewAddressRequest) GetProtocolVersion() StaticAddressProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return StaticAddressProtocolVersion_V0
}

func (x *ServerNewAddressRequest) GetClientKey() []byte {
	if x != nil {
		return x.ClientKey
	}
	return nil
}

type ServerNewAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server address parameters that the client needs to know to create the
	// static address output.
	Params *ServerAddressParameters `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ServerNewAddressResponse) Reset() {
	*x = ServerNewAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNewAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNewAddressResponse) ProtoMessage() {}

func (x *ServerNewAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNewAddressResponse.ProtoReflect.Descriptor instead.
func (*ServerNewAddressResponse) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{1}
}

func (x *ServerNewAddressResponse) GetParams() *ServerAddressParameters {
	if x != nil {
		return x.Params
	}
	return nil
}

type ServerAddressParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server key for the MuSig2 static address output.
	ServerKey []byte `protobuf:"bytes,1,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	// The CSV expiry of the static address output.
	Expiry uint32 `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *ServerAddressParameters) Reset() {
	*x = ServerAddressParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerAddressParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerAddressParameters) ProtoMessage() {}

func (x *ServerAddressParameters) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerAddressParameters.ProtoReflect.Descriptor instead.
func (*ServerAddressParameters) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{2}
}

func (x *ServerAddressParameters) GetServerKey() []byte {
	if x != nil {
		return x.ServerKey
	}
	return nil
}

func (x *ServerAddressParameters) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type ServerWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deposit outpoints the client wishes to withdraw.
	Outpoints []*PrevoutInfo `protobuf:"bytes,1,rep,name=outpoints,proto3" json:"outpoints,omitempty"`
	// The nonces that the client used to generate the withdrawal tx sigs.
	ClientNonces [][]byte `protobuf:"bytes,2,rep,name=client_nonces,json=clientNonces,proto3" json:"client_nonces,omitempty"`
	// The address that the client wants to sweep the static address deposits
	// to.
	ClientSweepAddr string `protobuf:"bytes,3,opt,name=client_sweep_addr,json=clientSweepAddr,proto3" json:"client_sweep_addr,omitempty"`
	// The fee rate in sat/kw that the client wants to use for the sweep.
	TxFeeRate uint64 `protobuf:"varint,4,opt,name=tx_fee_rate,json=txFeeRate,proto3" json:"tx_fee_rate,omitempty"`
	// The amount that the client wants to withdraw, in satoshis. This amount
	// can be a fraction of the total deposit amount.
	WithdrawAmount int64 `protobuf:"varint,5,opt,name=withdraw_amount,json=withdrawAmount,proto3" json:"withdraw_amount,omitempty"`
	// The change amount will be sent back to the static address. The client
	// ensures that the change amount covers the transaction fee, and that the
	// change after fees is at least the dust limit.
	ChangeAmount int64 `protobuf:"varint,6,opt,name=change_amount,json=changeAmount,proto3" json:"change_amount,omitempty"`
	// The address the client wants to send the change output to.
	ClientChangeAddr string `protobuf:"bytes,7,opt,name=client_change_addr,json=clientChangeAddr,proto3" json:"client_change_addr,omitempty"`
}

func (x *ServerWithdrawRequest) Reset() {
	*x = ServerWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerWithdrawRequest) ProtoMessage() {}

func (x *ServerWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerWithdrawRequest.ProtoReflect.Descriptor instead.
func (*ServerWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{3}
}

func (x *ServerWithdrawRequest) GetOutpoints() []*PrevoutInfo {
	if x != nil {
		return x.Outpoints
	}
	return nil
}

func (x *ServerWithdrawRequest) GetClientNonces() [][]byte {
	if x != nil {
		return x.ClientNonces
	}
	return nil
}

func (x *ServerWithdrawRequest) GetClientSweepAddr() string {
	if x != nil {
		return x.ClientSweepAddr
	}
	return ""
}

func (x *ServerWithdrawRequest) GetTxFeeRate() uint64 {
	if x != nil {
		return x.TxFeeRate
	}
	return 0
}

func (x *ServerWithdrawRequest) GetWithdrawAmount() int64 {
	if x != nil {
		return x.WithdrawAmount
	}
	return 0
}

func (x *ServerWithdrawRequest) GetChangeAmount() int64 {
	if x != nil {
		return x.ChangeAmount
	}
	return 0
}

func (x *ServerWithdrawRequest) GetClientChangeAddr() string {
	if x != nil {
		return x.ClientChangeAddr
	}
	return ""
}

type ServerWithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sweep sigs that the server generated for the htlc.
	Musig2SweepSigs [][]byte `protobuf:"bytes,1,rep,name=musig2_sweep_sigs,json=musig2SweepSigs,proto3" json:"musig2_sweep_sigs,omitempty"`
	// The nonces that the server used to generate the sweepless sweep sigs.
	ServerNonces [][]byte `protobuf:"bytes,2,rep,name=server_nonces,json=serverNonces,proto3" json:"server_nonces,omitempty"`
}

func (x *ServerWithdrawResponse) Reset() {
	*x = ServerWithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerWithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerWithdrawResponse) ProtoMessage() {}

func (x *ServerWithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerWithdrawResponse.ProtoReflect.Descriptor instead.
func (*ServerWithdrawResponse) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{4}
}

func (x *ServerWithdrawResponse) GetMusig2SweepSigs() [][]byte {
	if x != nil {
		return x.Musig2SweepSigs
	}
	return nil
}

func (x *ServerWithdrawResponse) GetServerNonces() [][]byte {
	if x != nil {
		return x.ServerNonces
	}
	return nil
}

type ServerStaticAddressLoopInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client's public key for the htlc output.
	HtlcClientPubKey []byte `protobuf:"bytes,1,opt,name=htlc_client_pub_key,json=htlcClientPubKey,proto3" json:"htlc_client_pub_key,omitempty"`
	// The hashed swap invoice preimage of the swap.
	SwapHash []byte `protobuf:"bytes,2,opt,name=swap_hash,json=swapHash,proto3" json:"swap_hash,omitempty"`
	// The deposit outpoints the client wishes to loop in. They implicitly state
	// the swap amount if the amount field is not specified. If the amount field
	// is specified, the server will use the total amount of the deposit
	// outpoints minus the amount as the change amount.
	DepositOutpoints []string `protobuf:"bytes,3,rep,name=deposit_outpoints,json=depositOutpoints,proto3" json:"deposit_outpoints,omitempty"`
	// The swap invoice that the client wants the server to pay.
	SwapInvoice string `protobuf:"bytes,4,opt,name=swap_invoice,json=swapInvoice,proto3" json:"swap_invoice,omitempty"`
	// An optional last hop the client wants to receive the invoice payment
	// from.
	LastHop []byte `protobuf:"bytes,5,opt,name=last_hop,json=lastHop,proto3" json:"last_hop,omitempty"`
	// The protocol version that the client adheres to.
	ProtocolVersion StaticAddressProtocolVersion `protobuf:"varint,6,opt,name=protocol_version,json=protocolVersion,proto3,enum=looprpc.StaticAddressProtocolVersion" json:"protocol_version,omitempty"`
	// The user agent string that identifies the software running on the user's
	// side. This can be changed in the user's client software but it _SHOULD_
	// conform to the following pattern:
	//
	//	Agent-Name/semver-version(/additional-info)
	//
	// Examples:
	//
	//	loopd/v0.10.0-beta/commit=3b635821
	//	litd/v0.2.0-alpha/commit=326d754
	//	loopd/v0.10.0-beta/commit=3b635823,initiator=easy-autoloop
	UserAgent string `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// The swap payment timeout allows the user to specify an upper limit for
	// the amount of time the server is allowed to take to fulfill the off-chain
	// swap payment. If the timeout is reached the swap will be aborted on the
	// server side and the client can retry the swap with different parameters.
	PaymentTimeoutSeconds uint32 `protobuf:"varint,8,opt,name=payment_timeout_seconds,json=paymentTimeoutSeconds,proto3" json:"payment_timeout_seconds,omitempty"`
	// The optional swap amount in satoshis the client is attempting to swap. If
	// specified the server will take out this amount from the total value of
	// provided deposit_outpoints and will send the change back to the static
	// address. If this results in dust change the server will reject the swap
	// request. If the amount is not specified the server will use the total amount
	// of the deposit_outpoints as swap amount without providing an additional
	// flag - this is to maintain backwards compatibility.
	Amount uint64 `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`
	// If set, request the server to use fast publication behavior for this
	// swap.
	Fast bool `protobuf:"varint,10,opt,name=fast,proto3" json:"fast,omitempty"`
	// The optional address the client wants to send the change output to.
	ChangeAddress string `protobuf:"bytes,11,opt,name=change_address,json=changeAddress,proto3" json:"change_address,omitempty"`
}

func (x *ServerStaticAddressLoopInRequest) Reset() {
	*x = ServerStaticAddressLoopInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStaticAddressLoopInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStaticAddressLoopInRequest) ProtoMessage() {}

func (x *ServerStaticAddressLoopInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStaticAddressLoopInRequest.ProtoReflect.Descriptor instead.
func (*ServerStaticAddressLoopInRequest) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{5}
}

func (x *ServerStaticAddressLoopInRequest) GetHtlcClientPubKey() []byte {
	if x != nil {
		return x.HtlcClientPubKey
	}
	return nil
}

func (x *ServerStaticAddressLoopInRequest) GetSwapHash() []byte {
	if x != nil {
		return x.SwapHash
	}
	return nil
}

func (x *ServerStaticAddressLoopInRequest) GetDepositOutpoints() []string {
	if x != nil {
		return x.DepositOutpoints
	}
	return nil
}

func (x *ServerStaticAddressLoopInRequest) GetSwapInvoice() string {
	if x != nil {
		return x.SwapInvoice
	}
	return ""
}

func (x *ServerStaticAddressLoopInRequest) GetLastHop() []byte {
	if x != nil {
		return x.LastHop
	}
	return nil
}

func (x *ServerStaticAddressLoopInRequest) GetProtocolVersion() StaticAddressProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return StaticAddressProtocolVersion_V0
}

func (x *ServerStaticAddressLoopInRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ServerStaticAddressLoopInRequest) GetPaymentTimeoutSeconds() uint32 {
	if x != nil {
		return x.PaymentTimeoutSeconds
	}
	return 0
}

func (x *ServerStaticAddressLoopInRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ServerStaticAddressLoopInRequest) GetFast() bool {
	if x != nil {
		return x.Fast
	}
	return false
}

func (x *ServerStaticAddressLoopInRequest) GetChangeAddress() string {
	if x != nil {
		return x.ChangeAddress
	}
	return ""
}

type ServerStaticAddressLoopInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server's public key for the htlc output.
	HtlcServerPubKey []byte `protobuf:"bytes,1,opt,name=htlc_server_pub_key,json=htlcServerPubKey,proto3" json:"htlc_server_pub_key,omitempty"`
	// The cltv expiry height for the htlc. This is the height at which the
	// htlc will expire and the client is free to claim the funds back.
	HtlcExpiry int32 `protobuf:"varint,2,opt,name=htlc_expiry,json=htlcExpiry,proto3" json:"htlc_expiry,omitempty"`
	// The info the server used to generate the standard fee partial htlc tx
	// sigs.
	StandardHtlcInfo *ServerHtlcSigningInfo `protobuf:"bytes,3,opt,name=standard_htlc_info,json=standardHtlcInfo,proto3" json:"standard_htlc_info,omitempty"`
	// The info the server used to generate the high fee partial htlc tx sigs.
	HighFeeHtlcInfo *ServerHtlcSigningInfo `protobuf:"bytes,4,opt,name=high_fee_htlc_info,json=highFeeHtlcInfo,proto3" json:"high_fee_htlc_info,omitempty"`
	// The info the server used to generate the extreme fee partial htlc tx
	// sigs.
	ExtremeFeeHtlcInfo *ServerHtlcSigningInfo `protobuf:"bytes,5,opt,name=extreme_fee_htlc_info,json=extremeFeeHtlcInfo,proto3" json:"extreme_fee_htlc_info,omitempty"`
}

func (x *ServerStaticAddressLoopInResponse) Reset() {
	*x = ServerStaticAddressLoopInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStaticAddressLoopInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStaticAddressLoopInResponse) ProtoMessage() {}

func (x *ServerStaticAddressLoopInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStaticAddressLoopInResponse.ProtoReflect.Descriptor instead.
func (*ServerStaticAddressLoopInResponse) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{6}
}

func (x *ServerStaticAddressLoopInResponse) GetHtlcServerPubKey() []byte {
	if x != nil {
		return x.HtlcServerPubKey
	}
	return nil
}

func (x *ServerStaticAddressLoopInResponse) GetHtlcExpiry() int32 {
	if x != nil {
		return x.HtlcExpiry
	}
	return 0
}

func (x *ServerStaticAddressLoopInResponse) GetStandardHtlcInfo() *ServerHtlcSigningInfo {
	if x != nil {
		return x.StandardHtlcInfo
	}
	return nil
}

func (x *ServerStaticAddressLoopInResponse) GetHighFeeHtlcInfo() *ServerHtlcSigningInfo {
	if x != nil {
		return x.HighFeeHtlcInfo
	}
	return nil
}

func (x *ServerStaticAddressLoopInResponse) GetExtremeFeeHtlcInfo() *ServerHtlcSigningInfo {
	if x != nil {
		return x.ExtremeFeeHtlcInfo
	}
	return nil
}

type ServerHtlcSigningInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nonces that the server used to generate the partial htlc tx sigs.
	Nonces [][]byte `protobuf:"bytes,1,rep,name=nonces,proto3" json:"nonces,omitempty"`
	// The fee rate in sat/kw that the server wants to use for the htlc tx.
	FeeRate uint64 `protobuf:"varint,2,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (x *ServerHtlcSigningInfo) Reset() {
	*x = ServerHtlcSigningInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerHtlcSigningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHtlcSigningInfo) ProtoMessage() {}

func (x *ServerHtlcSigningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHtlcSigningInfo.ProtoReflect.Descriptor instead.
func (*ServerHtlcSigningInfo) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{7}
}

func (x *ServerHtlcSigningInfo) GetNonces() [][]byte {
	if x != nil {
		return x.Nonces
	}
	return nil
}

func (x *ServerHtlcSigningInfo) GetFeeRate() uint64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type PushStaticAddressHtlcSigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The swap hash that the client wants to push the htlc sigs for.
	SwapHash []byte `protobuf:"bytes,1,opt,name=swap_hash,json=swapHash,proto3" json:"swap_hash,omitempty"`
	// The nonces that the client used to generate the htlc sigs.
	StandardHtlcInfo *ClientHtlcSigningInfo `protobuf:"bytes,2,opt,name=standard_htlc_info,json=standardHtlcInfo,proto3" json:"standard_htlc_info,omitempty"`
	// The nonces that the client used to generate the high fee htlc sigs.
	HighFeeHtlcInfo *ClientHtlcSigningInfo `protobuf:"bytes,3,opt,name=high_fee_htlc_info,json=highFeeHtlcInfo,proto3" json:"high_fee_htlc_info,omitempty"`
	// The nonces that the client used to generate the extreme fee htlc sigs.
	ExtremeFeeHtlcInfo *ClientHtlcSigningInfo `protobuf:"bytes,4,opt,name=extreme_fee_htlc_info,json=extremeFeeHtlcInfo,proto3" json:"extreme_fee_htlc_info,omitempty"`
}

func (x *PushStaticAddressHtlcSigsRequest) Reset() {
	*x = PushStaticAddressHtlcSigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushStaticAddressHtlcSigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushStaticAddressHtlcSigsRequest) ProtoMessage() {}

func (x *PushStaticAddressHtlcSigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushStaticAddressHtlcSigsRequest.ProtoReflect.Descriptor instead.
func (*PushStaticAddressHtlcSigsRequest) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{8}
}

func (x *PushStaticAddressHtlcSigsRequest) GetSwapHash() []byte {
	if x != nil {
		return x.SwapHash
	}
	return nil
}

func (x *PushStaticAddressHtlcSigsRequest) GetStandardHtlcInfo() *ClientHtlcSigningInfo {
	if x != nil {
		return x.StandardHtlcInfo
	}
	return nil
}

func (x *PushStaticAddressHtlcSigsRequest) GetHighFeeHtlcInfo() *ClientHtlcSigningInfo {
	if x != nil {
		return x.HighFeeHtlcInfo
	}
	return nil
}

func (x *PushStaticAddressHtlcSigsRequest) GetExtremeFeeHtlcInfo() *ClientHtlcSigningInfo {
	if x != nil {
		return x.ExtremeFeeHtlcInfo
	}
	return nil
}

type ClientHtlcSigningInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nonces that the client used to generate the partial htlc tx sigs.
	Nonces [][]byte `protobuf:"bytes,1,rep,name=nonces,proto3" json:"nonces,omitempty"`
	// The musig2 htlc sigs that the client generated for the htlc tx.
	Sigs [][]byte `protobuf:"bytes,2,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (x *ClientHtlcSigningInfo) Reset() {
	*x = ClientHtlcSigningInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHtlcSigningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHtlcSigningInfo) ProtoMessage() {}

func (x *ClientHtlcSigningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHtlcSigningInfo.ProtoReflect.Descriptor instead.
func (*ClientHtlcSigningInfo) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{9}
}

func (x *ClientHtlcSigningInfo) GetNonces() [][]byte {
	if x != nil {
		return x.Nonces
	}
	return nil
}

func (x *ClientHtlcSigningInfo) GetSigs() [][]byte {
	if x != nil {
		return x.Sigs
	}
	return nil
}

type PushStaticAddressHtlcSigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushStaticAddressHtlcSigsResponse) Reset() {
	*x = PushStaticAddressHtlcSigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushStaticAddressHtlcSigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushStaticAddressHtlcSigsResponse) ProtoMessage() {}

func (x *PushStaticAddressHtlcSigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushStaticAddressHtlcSigsResponse.ProtoReflect.Descriptor instead.
func (*PushStaticAddressHtlcSigsResponse) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{10}
}

type PushStaticAddressSweeplessSigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The swap hash of the swap that the client wants to push the sweepless
	// sigs for.
	SwapHash []byte `protobuf:"bytes,1,opt,name=swap_hash,json=swapHash,proto3" json:"swap_hash,omitempty"`
	// The txid of the sweep tx that the client wants to push the sweepless
	// sigs for.
	Txid []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	// A map of deposits in format txid:idx to the nonces.
	SigningInfo map[string]*ClientSweeplessSigningInfo `protobuf:"bytes,3,rep,name=signing_info,json=signingInfo,proto3" json:"signing_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An optional error message that the client can provide, e.g. if the
	// client does not consider the swap finished yet.bool
	ErrorMessage string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *PushStaticAddressSweeplessSigsRequest) Reset() {
	*x = PushStaticAddressSweeplessSigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushStaticAddressSweeplessSigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushStaticAddressSweeplessSigsRequest) ProtoMessage() {}

func (x *PushStaticAddressSweeplessSigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushStaticAddressSweeplessSigsRequest.ProtoReflect.Descriptor instead.
func (*PushStaticAddressSweeplessSigsRequest) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{11}
}

func (x *PushStaticAddressSweeplessSigsRequest) GetSwapHash() []byte {
	if x != nil {
		return x.SwapHash
	}
	return nil
}

func (x *PushStaticAddressSweeplessSigsRequest) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *PushStaticAddressSweeplessSigsRequest) GetSigningInfo() map[string]*ClientSweeplessSigningInfo {
	if x != nil {
		return x.SigningInfo
	}
	return nil
}

func (x *PushStaticAddressSweeplessSigsRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ClientSweeplessSigningInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nonces that the client used to generate the partial sweepless tx
	// sigs.
	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The musig2 htlc sigs that the client generated for the sweepless tx.
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *ClientSweeplessSigningInfo) Reset() {
	*x = ClientSweeplessSigningInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSweeplessSigningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSweeplessSigningInfo) ProtoMessage() {}

func (x *ClientSweeplessSigningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSweeplessSigningInfo.ProtoReflect.Descriptor instead.
func (*ClientSweeplessSigningInfo) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{12}
}

func (x *ClientSweeplessSigningInfo) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ClientSweeplessSigningInfo) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type PushStaticAddressSweeplessSigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushStaticAddressSweeplessSigsResponse) Reset() {
	*x = PushStaticAddressSweeplessSigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushStaticAddressSweeplessSigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushStaticAddressSweeplessSigsResponse) ProtoMessage() {}

func (x *PushStaticAddressSweeplessSigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushStaticAddressSweeplessSigsResponse.ProtoReflect.Descriptor instead.
func (*PushStaticAddressSweeplessSigsResponse) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{13}
}

type SignOpenChannelPsbtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The psbt of the open channel.
	OpenChannelTxPsbt []byte `protobuf:"bytes,1,opt,name=open_channel_tx_psbt,json=openChannelTxPsbt,proto3" json:"open_channel_tx_psbt,omitempty"`
	// The map of deposit txid:idx to the nonce used by the client.
	DepositToNonces map[string][]byte `protobuf:"bytes,2,rep,name=deposit_to_nonces,json=depositToNonces,proto3" json:"deposit_to_nonces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The prevout information of the open channel psbt.
	PrevoutInfo []*PrevoutInfo `protobuf:"bytes,3,rep,name=prevout_info,json=prevoutInfo,proto3" json:"prevout_info,omitempty"`
}

func (x *SignOpenChannelPsbtRequest) Reset() {
	*x = SignOpenChannelPsbtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignOpenChannelPsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOpenChannelPsbtRequest) ProtoMessage() {}

func (x *SignOpenChannelPsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOpenChannelPsbtRequest.ProtoReflect.Descriptor instead.
func (*SignOpenChannelPsbtRequest) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{14}
}

func (x *SignOpenChannelPsbtRequest) GetOpenChannelTxPsbt() []byte {
	if x != nil {
		return x.OpenChannelTxPsbt
	}
	return nil
}

func (x *SignOpenChannelPsbtRequest) GetDepositToNonces() map[string][]byte {
	if x != nil {
		return x.DepositToNonces
	}
	return nil
}

func (x *SignOpenChannelPsbtRequest) GetPrevoutInfo() []*PrevoutInfo {
	if x != nil {
		return x.PrevoutInfo
	}
	return nil
}

type SignOpenChannelPsbtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The txid of the psbt that the client wants to push the sweepless
	// sigs for.
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// A map of deposits in format txid:idx to the nonces.
	SigningInfo map[string]*ServerChannelOpenSigningInfo `protobuf:"bytes,3,rep,name=signing_info,json=signingInfo,proto3" json:"signing_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SignOpenChannelPsbtResponse) Reset() {
	*x = SignOpenChannelPsbtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignOpenChannelPsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOpenChannelPsbtResponse) ProtoMessage() {}

func (x *SignOpenChannelPsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOpenChannelPsbtResponse.ProtoReflect.Descriptor instead.
func (*SignOpenChannelPsbtResponse) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{15}
}

func (x *SignOpenChannelPsbtResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *SignOpenChannelPsbtResponse) GetSigningInfo() map[string]*ServerChannelOpenSigningInfo {
	if x != nil {
		return x.SigningInfo
	}
	return nil
}

type ServerChannelOpenSigningInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nonces that the client used to generate the partial sweepless tx
	// sigs.
	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The musig2 htlc sigs that the client generated for the sweepless tx.
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *ServerChannelOpenSigningInfo) Reset() {
	*x = ServerChannelOpenSigningInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_staticaddr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerChannelOpenSigningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerChannelOpenSigningInfo) ProtoMessage() {}

func (x *ServerChannelOpenSigningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_staticaddr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerChannelOpenSigningInfo.ProtoReflect.Descriptor instead.
func (*ServerChannelOpenSigningInfo) Descriptor() ([]byte, []int) {
	return file_staticaddr_proto_rawDescGZIP(), []int{16}
}

func (x *ServerChannelOpenSigningInfo) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ServerChannelOpenSigningInfo) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

var File_staticaddr_proto protoreflect.FileDescriptor

var file_staticaddr_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x61, 0x64, 0x64, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x1a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x54, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x50, 0x0a, 0x17,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0xb8,
	0x02, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x77, 0x65, 0x65,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x65, 0x65, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a,
	0x0b, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x78, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x69, 0x0a, 0x16, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x67, 0x32, 0x5f, 0x73, 0x77,
	0x65, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f,
	0x6d, 0x75, 0x73, 0x69, 0x67, 0x32, 0x53, 0x77, 0x65, 0x65, 0x70, 0x53, 0x69, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x6f, 0x70,
	0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x74, 0x6c,
	0x63, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x68, 0x74, 0x6c, 0x63, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x6f, 0x70,
	0x12, 0x50, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x66, 0x61, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe1, 0x02, 0x0a,
	0x21, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x68, 0x74, 0x6c, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x74, 0x6c, 0x63, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x12, 0x4c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x68,
	0x74, 0x6c, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4b, 0x0a, 0x12, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x68, 0x74, 0x6c,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x74, 0x6c,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x68, 0x69,
	0x67, 0x68, 0x46, 0x65, 0x65, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a,
	0x15, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x68, 0x74, 0x6c,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x74, 0x6c,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x78,
	0x74, 0x72, 0x65, 0x6d, 0x65, 0x46, 0x65, 0x65, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x4a, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xad, 0x02, 0x0a,
	0x20, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x74, 0x6c, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x12,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x46, 0x65,
	0x65, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x15, 0x65, 0x78, 0x74,
	0x72, 0x65, 0x6d, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d,
	0x65, 0x46, 0x65, 0x65, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x15,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x73, 0x22, 0x23, 0x0a, 0x21, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x25, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65,
	0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x12, 0x62, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x63, 0x0a, 0x10, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x44, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65,
	0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0x28, 0x0a, 0x26, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c,
	0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb0, 0x02, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x78, 0x5f, 0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6f, 0x70,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x78, 0x50, 0x73, 0x62, 0x74, 0x12,
	0x64, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x6f, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x42,
	0x0a, 0x14, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x1b, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x65, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x2a,
	0x26, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x06, 0x0a, 0x02, 0x56, 0x30, 0x10, 0x00, 0x32, 0x97, 0x05, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x73, 0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x6f, 0x70, 0x49, 0x6e,
	0x12, 0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x6f, 0x70, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x19, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x74, 0x6c, 0x63,
	0x53, 0x69, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x74, 0x6c, 0x63, 0x53,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1e,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x73, 0x12, 0x2e,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c,
	0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c,
	0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x73, 0x62, 0x74, 0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6c, 0x6f,
	0x6f, 0x70, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_staticaddr_proto_rawDescOnce sync.Once
	file_staticaddr_proto_rawDescData = file_staticaddr_proto_rawDesc
)

func file_staticaddr_proto_rawDescGZIP() []byte {
	file_staticaddr_proto_rawDescOnce.Do(func() {
		file_staticaddr_proto_rawDescData = protoimpl.X.CompressGZIP(file_staticaddr_proto_rawDescData)
	})
	return file_staticaddr_proto_rawDescData
}

var file_staticaddr_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_staticaddr_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_staticaddr_proto_goTypes = []any{
	(StaticAddressProtocolVersion)(0),              // 0: looprpc.StaticAddressProtocolVersion
	(*ServerNewAddressRequest)(nil),                // 1: looprpc.ServerNewAddressRequest
	(*ServerNewAddressResponse)(nil),               // 2: looprpc.ServerNewAddressResponse
	(*ServerAddressParameters)(nil),                // 3: looprpc.ServerAddressParameters
	(*ServerWithdrawRequest)(nil),                  // 4: looprpc.ServerWithdrawRequest
	(*ServerWithdrawResponse)(nil),                 // 5: looprpc.ServerWithdrawResponse
	(*ServerStaticAddressLoopInRequest)(nil),       // 6: looprpc.ServerStaticAddressLoopInRequest
	(*ServerStaticAddressLoopInResponse)(nil),      // 7: looprpc.ServerStaticAddressLoopInResponse
	(*ServerHtlcSigningInfo)(nil),                  // 8: looprpc.ServerHtlcSigningInfo
	(*PushStaticAddressHtlcSigsRequest)(nil),       // 9: looprpc.PushStaticAddressHtlcSigsRequest
	(*ClientHtlcSigningInfo)(nil),                  // 10: looprpc.ClientHtlcSigningInfo
	(*PushStaticAddressHtlcSigsResponse)(nil),      // 11: looprpc.PushStaticAddressHtlcSigsResponse
	(*PushStaticAddressSweeplessSigsRequest)(nil),  // 12: looprpc.PushStaticAddressSweeplessSigsRequest
	(*ClientSweeplessSigningInfo)(nil),             // 13: looprpc.ClientSweeplessSigningInfo
	(*PushStaticAddressSweeplessSigsResponse)(nil), // 14: looprpc.PushStaticAddressSweeplessSigsResponse
	(*SignOpenChannelPsbtRequest)(nil),             // 15: looprpc.SignOpenChannelPsbtRequest
	(*SignOpenChannelPsbtResponse)(nil),            // 16: looprpc.SignOpenChannelPsbtResponse
	(*ServerChannelOpenSigningInfo)(nil),           // 17: looprpc.ServerChannelOpenSigningInfo
	nil,                                            // 18: looprpc.PushStaticAddressSweeplessSigsRequest.SigningInfoEntry
	nil,                                            // 19: looprpc.SignOpenChannelPsbtRequest.DepositToNoncesEntry
	nil,                                            // 20: looprpc.SignOpenChannelPsbtResponse.SigningInfoEntry
	(*PrevoutInfo)(nil),                            // 21: looprpc.PrevoutInfo
}
var file_staticaddr_proto_depIdxs = []int32{
	0,  // 0: looprpc.ServerNewAddressRequest.protocol_version:type_name -> looprpc.StaticAddressProtocolVersion
	3,  // 1: looprpc.ServerNewAddressResponse.params:type_name -> looprpc.ServerAddressParameters
	21, // 2: looprpc.ServerWithdrawRequest.outpoints:type_name -> looprpc.PrevoutInfo
	0,  // 3: looprpc.ServerStaticAddressLoopInRequest.protocol_version:type_name -> looprpc.StaticAddressProtocolVersion
	8,  // 4: looprpc.ServerStaticAddressLoopInResponse.standard_htlc_info:type_name -> looprpc.ServerHtlcSigningInfo
	8,  // 5: looprpc.ServerStaticAddressLoopInResponse.high_fee_htlc_info:type_name -> looprpc.ServerHtlcSigningInfo
	8,  // 6: looprpc.ServerStaticAddressLoopInResponse.extreme_fee_htlc_info:type_name -> looprpc.ServerHtlcSigningInfo
	10, // 7: looprpc.PushStaticAddressHtlcSigsRequest.standard_htlc_info:type_name -> looprpc.ClientHtlcSigningInfo
	10, // 8: looprpc.PushStaticAddressHtlcSigsRequest.high_fee_htlc_info:type_name -> looprpc.ClientHtlcSigningInfo
	10, // 9: looprpc.PushStaticAddressHtlcSigsRequest.extreme_fee_htlc_info:type_name -> looprpc.ClientHtlcSigningInfo
	18, // 10: looprpc.PushStaticAddressSweeplessSigsRequest.signing_info:type_name -> looprpc.PushStaticAddressSweeplessSigsRequest.SigningInfoEntry
	19, // 11: looprpc.SignOpenChannelPsbtRequest.deposit_to_nonces:type_name -> looprpc.SignOpenChannelPsbtRequest.DepositToNoncesEntry
	21, // 12: looprpc.SignOpenChannelPsbtRequest.prevout_info:type_name -> looprpc.PrevoutInfo
	20, // 13: looprpc.SignOpenChannelPsbtResponse.signing_info:type_name -> looprpc.SignOpenChannelPsbtResponse.SigningInfoEntry
	13, // 14: looprpc.PushStaticAddressSweeplessSigsRequest.SigningInfoEntry.value:type_name -> looprpc.ClientSweeplessSigningInfo
	17, // 15: looprpc.SignOpenChannelPsbtResponse.SigningInfoEntry.value:type_name -> looprpc.ServerChannelOpenSigningInfo
	1,  // 16: looprpc.StaticAddressServer.ServerNewAddress:input_type -> looprpc.ServerNewAddressRequest
	4,  // 17: looprpc.StaticAddressServer.ServerWithdrawDeposits:input_type -> looprpc.ServerWithdrawRequest
	6,  // 18: looprpc.StaticAddressServer.ServerStaticAddressLoopIn:input_type -> looprpc.ServerStaticAddressLoopInRequest
	9,  // 19: looprpc.StaticAddressServer.PushStaticAddressHtlcSigs:input_type -> looprpc.PushStaticAddressHtlcSigsRequest
	12, // 20: looprpc.StaticAddressServer.PushStaticAddressSweeplessSigs:input_type -> looprpc.PushStaticAddressSweeplessSigsRequest
	15, // 21: looprpc.StaticAddressServer.SignOpenChannelPsbt:input_type -> looprpc.SignOpenChannelPsbtRequest
	2,  // 22: looprpc.StaticAddressServer.ServerNewAddress:output_type -> looprpc.ServerNewAddressResponse
	5,  // 23: looprpc.StaticAddressServer.ServerWithdrawDeposits:output_type -> looprpc.ServerWithdrawResponse
	7,  // 24: looprpc.StaticAddressServer.ServerStaticAddressLoopIn:output_type -> looprpc.ServerStaticAddressLoopInResponse
	11, // 25: looprpc.StaticAddressServer.PushStaticAddressHtlcSigs:output_type -> looprpc.PushStaticAddressHtlcSigsResponse
	14, // 26: looprpc.StaticAddressServer.PushStaticAddressSweeplessSigs:output_type -> looprpc.PushStaticAddressSweeplessSigsResponse
	16, // 27: looprpc.StaticAddressServer.SignOpenChannelPsbt:output_type -> looprpc.SignOpenChannelPsbtResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_staticaddr_proto_init() }
func file_staticaddr_proto_init() {
	if File_staticaddr_proto != nil {
		return
	}
	file_server_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_staticaddr_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ServerNewAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ServerNewAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ServerAddressParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ServerWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ServerWithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ServerStaticAddressLoopInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ServerStaticAddressLoopInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ServerHtlcSigningInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PushStaticAddressHtlcSigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ClientHtlcSigningInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PushStaticAddressHtlcSigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PushStaticAddressSweeplessSigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ClientSweeplessSigningInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PushStaticAddressSweeplessSigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SignOpenChannelPsbtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SignOpenChannelPsbtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_staticaddr_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ServerChannelOpenSigningInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_staticaddr_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_staticaddr_proto_goTypes,
		DependencyIndexes: file_staticaddr_proto_depIdxs,
		EnumInfos:         file_staticaddr_proto_enumTypes,
		MessageInfos:      file_staticaddr_proto_msgTypes,
	}.Build()
	File_staticaddr_proto = out.File
	file_staticaddr_proto_rawDesc = nil
	file_staticaddr_proto_goTypes = nil
	file_staticaddr_proto_depIdxs = nil
}
