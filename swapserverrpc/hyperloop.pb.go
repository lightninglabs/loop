// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: hyperloop.proto

// We can't change this to swapserverrpc, it would be a breaking change because
// the package name is also contained in the HTTP URIs and old clients would
// call the wrong endpoints. Luckily with the go_package option we can have
// different golang and RPC package names to fix protobuf namespace conflicts.

package swapserverrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HyperloopStatus int32

const (
	HyperloopStatus_UNDEFINED                     HyperloopStatus = 0
	HyperloopStatus_PENDING                       HyperloopStatus = 1
	HyperloopStatus_PUBLISHED                     HyperloopStatus = 2
	HyperloopStatus_WAIT_FOR_HTLC_NONCES          HyperloopStatus = 3
	HyperloopStatus_WAIT_FOR_HTLC_SIGS            HyperloopStatus = 4
	HyperloopStatus_WAIT_FOR_PREIMAGES            HyperloopStatus = 5
	HyperloopStatus_WAIT_FOR_SWEEPLESS_SWEEP_SIGS HyperloopStatus = 6
	HyperloopStatus_SWEEPLESS_SWEEP_PUBLISHED     HyperloopStatus = 7
	HyperloopStatus_SWEEPLESS_SWEEP_CONFIRMED     HyperloopStatus = 8
	HyperloopStatus_HYPERLOOP_FAILED              HyperloopStatus = 9
)

// Enum value maps for HyperloopStatus.
var (
	HyperloopStatus_name = map[int32]string{
		0: "UNDEFINED",
		1: "PENDING",
		2: "PUBLISHED",
		3: "WAIT_FOR_HTLC_NONCES",
		4: "WAIT_FOR_HTLC_SIGS",
		5: "WAIT_FOR_PREIMAGES",
		6: "WAIT_FOR_SWEEPLESS_SWEEP_SIGS",
		7: "SWEEPLESS_SWEEP_PUBLISHED",
		8: "SWEEPLESS_SWEEP_CONFIRMED",
		9: "HYPERLOOP_FAILED",
	}
	HyperloopStatus_value = map[string]int32{
		"UNDEFINED":                     0,
		"PENDING":                       1,
		"PUBLISHED":                     2,
		"WAIT_FOR_HTLC_NONCES":          3,
		"WAIT_FOR_HTLC_SIGS":            4,
		"WAIT_FOR_PREIMAGES":            5,
		"WAIT_FOR_SWEEPLESS_SWEEP_SIGS": 6,
		"SWEEPLESS_SWEEP_PUBLISHED":     7,
		"SWEEPLESS_SWEEP_CONFIRMED":     8,
		"HYPERLOOP_FAILED":              9,
	}
)

func (x HyperloopStatus) Enum() *HyperloopStatus {
	p := new(HyperloopStatus)
	*p = x
	return p
}

func (x HyperloopStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HyperloopStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hyperloop_proto_enumTypes[0].Descriptor()
}

func (HyperloopStatus) Type() protoreflect.EnumType {
	return &file_hyperloop_proto_enumTypes[0]
}

func (x HyperloopStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HyperloopStatus.Descriptor instead.
func (HyperloopStatus) EnumDescriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{0}
}

type HyperloopNotificationStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
}

func (x *HyperloopNotificationStreamRequest) Reset() {
	*x = HyperloopNotificationStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopNotificationStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopNotificationStreamRequest) ProtoMessage() {}

func (x *HyperloopNotificationStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopNotificationStreamRequest.ProtoReflect.Descriptor instead.
func (*HyperloopNotificationStreamRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{0}
}

func (x *HyperloopNotificationStreamRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

type HyperloopNotificationStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HyperloopStatus `protobuf:"varint,1,opt,name=status,proto3,enum=looprpc.HyperloopStatus" json:"status,omitempty"`
}

func (x *HyperloopNotificationStreamResponse) Reset() {
	*x = HyperloopNotificationStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopNotificationStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopNotificationStreamResponse) ProtoMessage() {}

func (x *HyperloopNotificationStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopNotificationStreamResponse.ProtoReflect.Descriptor instead.
func (*HyperloopNotificationStreamResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{1}
}

func (x *HyperloopNotificationStreamResponse) GetStatus() HyperloopStatus {
	if x != nil {
		return x.Status
	}
	return HyperloopStatus_UNDEFINED
}

type GetPendingHyperloopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPendingHyperloopRequest) Reset() {
	*x = GetPendingHyperloopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingHyperloopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingHyperloopRequest) ProtoMessage() {}

func (x *GetPendingHyperloopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingHyperloopRequest.ProtoReflect.Descriptor instead.
func (*GetPendingHyperloopRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{2}
}

type GetPendingHyperloopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingPrivateHyperloop *PendingHyperloop `protobuf:"bytes,1,opt,name=pending_private_hyperloop,json=pendingPrivateHyperloop,proto3" json:"pending_private_hyperloop,omitempty"`
}

func (x *GetPendingHyperloopResponse) Reset() {
	*x = GetPendingHyperloopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingHyperloopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingHyperloopResponse) ProtoMessage() {}

func (x *GetPendingHyperloopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingHyperloopResponse.ProtoReflect.Descriptor instead.
func (*GetPendingHyperloopResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{3}
}

func (x *GetPendingHyperloopResponse) GetPendingPrivateHyperloop() *PendingHyperloop {
	if x != nil {
		return x.PendingPrivateHyperloop
	}
	return nil
}

type PendingHyperloop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId         []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
	PublishDeadlineUnix int64  `protobuf:"varint,2,opt,name=publish_deadline_unix,json=publishDeadlineUnix,proto3" json:"publish_deadline_unix,omitempty"`
	ParticipantCount    int32  `protobuf:"varint,3,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
}

func (x *PendingHyperloop) Reset() {
	*x = PendingHyperloop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingHyperloop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingHyperloop) ProtoMessage() {}

func (x *PendingHyperloop) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingHyperloop.ProtoReflect.Descriptor instead.
func (*PendingHyperloop) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{4}
}

func (x *PendingHyperloop) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

func (x *PendingHyperloop) GetPublishDeadlineUnix() int64 {
	if x != nil {
		return x.PublishDeadlineUnix
	}
	return 0
}

func (x *PendingHyperloop) GetParticipantCount() int32 {
	if x != nil {
		return x.ParticipantCount
	}
	return 0
}

type RegisterHyperloopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverKey              []byte `protobuf:"bytes,1,opt,name=receiver_key,json=receiverKey,proto3" json:"receiver_key,omitempty"`
	SwapHash                 []byte `protobuf:"bytes,2,opt,name=swap_hash,json=swapHash,proto3" json:"swap_hash,omitempty"`
	Amt                      int64  `protobuf:"varint,3,opt,name=amt,proto3" json:"amt,omitempty"`
	HyperloopPublishTimeUnix int64  `protobuf:"varint,4,opt,name=hyperloop_publish_time_unix,json=hyperloopPublishTimeUnix,proto3" json:"hyperloop_publish_time_unix,omitempty"`
	SweepAddr                string `protobuf:"bytes,5,opt,name=sweep_addr,json=sweepAddr,proto3" json:"sweep_addr,omitempty"`
	Private                  bool   `protobuf:"varint,6,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *RegisterHyperloopRequest) Reset() {
	*x = RegisterHyperloopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterHyperloopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHyperloopRequest) ProtoMessage() {}

func (x *RegisterHyperloopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHyperloopRequest.ProtoReflect.Descriptor instead.
func (*RegisterHyperloopRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterHyperloopRequest) GetReceiverKey() []byte {
	if x != nil {
		return x.ReceiverKey
	}
	return nil
}

func (x *RegisterHyperloopRequest) GetSwapHash() []byte {
	if x != nil {
		return x.SwapHash
	}
	return nil
}

func (x *RegisterHyperloopRequest) GetAmt() int64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

func (x *RegisterHyperloopRequest) GetHyperloopPublishTimeUnix() int64 {
	if x != nil {
		return x.HyperloopPublishTimeUnix
	}
	return 0
}

func (x *RegisterHyperloopRequest) GetSweepAddr() string {
	if x != nil {
		return x.SweepAddr
	}
	return ""
}

func (x *RegisterHyperloopRequest) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

type RegisterHyperloopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId        []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
	ServerKey          []byte `protobuf:"bytes,2,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	HtlcCltvExpiry     int32  `protobuf:"varint,3,opt,name=htlc_cltv_expiry,json=htlcCltvExpiry,proto3" json:"htlc_cltv_expiry,omitempty"`
	HyperloopCsvExpiry int32  `protobuf:"varint,4,opt,name=hyperloop_csv_expiry,json=hyperloopCsvExpiry,proto3" json:"hyperloop_csv_expiry,omitempty"`
	Invoice            string `protobuf:"bytes,5,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *RegisterHyperloopResponse) Reset() {
	*x = RegisterHyperloopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterHyperloopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHyperloopResponse) ProtoMessage() {}

func (x *RegisterHyperloopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHyperloopResponse.ProtoReflect.Descriptor instead.
func (*RegisterHyperloopResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterHyperloopResponse) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

func (x *RegisterHyperloopResponse) GetServerKey() []byte {
	if x != nil {
		return x.ServerKey
	}
	return nil
}

func (x *RegisterHyperloopResponse) GetHtlcCltvExpiry() int32 {
	if x != nil {
		return x.HtlcCltvExpiry
	}
	return 0
}

func (x *RegisterHyperloopResponse) GetHyperloopCsvExpiry() int32 {
	if x != nil {
		return x.HyperloopCsvExpiry
	}
	return 0
}

func (x *RegisterHyperloopResponse) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

type FetchHyperloopHtlcFeeRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
}

func (x *FetchHyperloopHtlcFeeRatesRequest) Reset() {
	*x = FetchHyperloopHtlcFeeRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopHtlcFeeRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopHtlcFeeRatesRequest) ProtoMessage() {}

func (x *FetchHyperloopHtlcFeeRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopHtlcFeeRatesRequest.ProtoReflect.Descriptor instead.
func (*FetchHyperloopHtlcFeeRatesRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{7}
}

func (x *FetchHyperloopHtlcFeeRatesRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

type FetchHyperloopHtlcFeeRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HtlcFeeRates []int64 `protobuf:"varint,1,rep,packed,name=htlc_fee_rates,json=htlcFeeRates,proto3" json:"htlc_fee_rates,omitempty"`
}

func (x *FetchHyperloopHtlcFeeRatesResponse) Reset() {
	*x = FetchHyperloopHtlcFeeRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopHtlcFeeRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopHtlcFeeRatesResponse) ProtoMessage() {}

func (x *FetchHyperloopHtlcFeeRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopHtlcFeeRatesResponse.ProtoReflect.Descriptor instead.
func (*FetchHyperloopHtlcFeeRatesResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{8}
}

func (x *FetchHyperloopHtlcFeeRatesResponse) GetHtlcFeeRates() []int64 {
	if x != nil {
		return x.HtlcFeeRates
	}
	return nil
}

type FetchHyperloopParticipantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
}

func (x *FetchHyperloopParticipantsRequest) Reset() {
	*x = FetchHyperloopParticipantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopParticipantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopParticipantsRequest) ProtoMessage() {}

func (x *FetchHyperloopParticipantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopParticipantsRequest.ProtoReflect.Descriptor instead.
func (*FetchHyperloopParticipantsRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{9}
}

func (x *FetchHyperloopParticipantsRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

type FetchHyperloopParticipantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants []*HyperloopParticipant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *FetchHyperloopParticipantsResponse) Reset() {
	*x = FetchHyperloopParticipantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopParticipantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopParticipantsResponse) ProtoMessage() {}

func (x *FetchHyperloopParticipantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopParticipantsResponse.ProtoReflect.Descriptor instead.
func (*FetchHyperloopParticipantsResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{10}
}

func (x *FetchHyperloopParticipantsResponse) GetParticipants() []*HyperloopParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type HyperloopParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	SweepAddr string `protobuf:"bytes,2,opt,name=sweep_addr,json=sweepAddr,proto3" json:"sweep_addr,omitempty"`
}

func (x *HyperloopParticipant) Reset() {
	*x = HyperloopParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopParticipant) ProtoMessage() {}

func (x *HyperloopParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopParticipant.ProtoReflect.Descriptor instead.
func (*HyperloopParticipant) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{11}
}

func (x *HyperloopParticipant) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *HyperloopParticipant) GetSweepAddr() string {
	if x != nil {
		return x.SweepAddr
	}
	return ""
}

type PushHyperloopHtlcNoncesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte           `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
	SwapHash    []byte           `protobuf:"bytes,2,opt,name=swap_hash,json=swapHash,proto3" json:"swap_hash,omitempty"`
	HtlcNonces  map[int64][]byte `protobuf:"bytes,3,rep,name=htlc_nonces,json=htlcNonces,proto3" json:"htlc_nonces,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PushHyperloopHtlcNoncesRequest) Reset() {
	*x = PushHyperloopHtlcNoncesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHyperloopHtlcNoncesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHyperloopHtlcNoncesRequest) ProtoMessage() {}

func (x *PushHyperloopHtlcNoncesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHyperloopHtlcNoncesRequest.ProtoReflect.Descriptor instead.
func (*PushHyperloopHtlcNoncesRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{12}
}

func (x *PushHyperloopHtlcNoncesRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

func (x *PushHyperloopHtlcNoncesRequest) GetSwapHash() []byte {
	if x != nil {
		return x.SwapHash
	}
	return nil
}

func (x *PushHyperloopHtlcNoncesRequest) GetHtlcNonces() map[int64][]byte {
	if x != nil {
		return x.HtlcNonces
	}
	return nil
}

type PushHyperloopHtlcNoncesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerHtlcNonces map[int64][]byte `protobuf:"bytes,1,rep,name=server_htlc_nonces,json=serverHtlcNonces,proto3" json:"server_htlc_nonces,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HtlcRawTxns      map[int64][]byte `protobuf:"bytes,2,rep,name=htlc_raw_txns,json=htlcRawTxns,proto3" json:"htlc_raw_txns,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PushHyperloopHtlcNoncesResponse) Reset() {
	*x = PushHyperloopHtlcNoncesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHyperloopHtlcNoncesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHyperloopHtlcNoncesResponse) ProtoMessage() {}

func (x *PushHyperloopHtlcNoncesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHyperloopHtlcNoncesResponse.ProtoReflect.Descriptor instead.
func (*PushHyperloopHtlcNoncesResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{13}
}

func (x *PushHyperloopHtlcNoncesResponse) GetServerHtlcNonces() map[int64][]byte {
	if x != nil {
		return x.ServerHtlcNonces
	}
	return nil
}

func (x *PushHyperloopHtlcNoncesResponse) GetHtlcRawTxns() map[int64][]byte {
	if x != nil {
		return x.HtlcRawTxns
	}
	return nil
}

type FetchHyperloopHtlcNoncesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
}

func (x *FetchHyperloopHtlcNoncesRequest) Reset() {
	*x = FetchHyperloopHtlcNoncesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopHtlcNoncesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopHtlcNoncesRequest) ProtoMessage() {}

func (x *FetchHyperloopHtlcNoncesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopHtlcNoncesRequest.ProtoReflect.Descriptor instead.
func (*FetchHyperloopHtlcNoncesRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{14}
}

func (x *FetchHyperloopHtlcNoncesRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

type ParticipantNonces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantNonce [][]byte `protobuf:"bytes,1,rep,name=participant_nonce,json=participantNonce,proto3" json:"participant_nonce,omitempty"`
}

func (x *ParticipantNonces) Reset() {
	*x = ParticipantNonces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantNonces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantNonces) ProtoMessage() {}

func (x *ParticipantNonces) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantNonces.ProtoReflect.Descriptor instead.
func (*ParticipantNonces) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{15}
}

func (x *ParticipantNonces) GetParticipantNonce() [][]byte {
	if x != nil {
		return x.ParticipantNonce
	}
	return nil
}

type FetchHyperloopHtlcNoncesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HtlcNoncesByFees map[int64]*ParticipantNonces `protobuf:"bytes,1,rep,name=htlc_nonces_by_fees,json=htlcNoncesByFees,proto3" json:"htlc_nonces_by_fees,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchHyperloopHtlcNoncesResponse) Reset() {
	*x = FetchHyperloopHtlcNoncesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopHtlcNoncesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopHtlcNoncesResponse) ProtoMessage() {}

func (x *FetchHyperloopHtlcNoncesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopHtlcNoncesResponse.ProtoReflect.Descriptor instead.
func (*FetchHyperloopHtlcNoncesResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{16}
}

func (x *FetchHyperloopHtlcNoncesResponse) GetHtlcNoncesByFees() map[int64]*ParticipantNonces {
	if x != nil {
		return x.HtlcNoncesByFees
	}
	return nil
}

type PushHyperloopHtlcSigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte           `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
	SwapHash    []byte           `protobuf:"bytes,2,opt,name=swap_hash,json=swapHash,proto3" json:"swap_hash,omitempty"`
	HtlcSigs    map[int64][]byte `protobuf:"bytes,3,rep,name=htlc_sigs,json=htlcSigs,proto3" json:"htlc_sigs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PushHyperloopHtlcSigRequest) Reset() {
	*x = PushHyperloopHtlcSigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHyperloopHtlcSigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHyperloopHtlcSigRequest) ProtoMessage() {}

func (x *PushHyperloopHtlcSigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHyperloopHtlcSigRequest.ProtoReflect.Descriptor instead.
func (*PushHyperloopHtlcSigRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{17}
}

func (x *PushHyperloopHtlcSigRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

func (x *PushHyperloopHtlcSigRequest) GetSwapHash() []byte {
	if x != nil {
		return x.SwapHash
	}
	return nil
}

func (x *PushHyperloopHtlcSigRequest) GetHtlcSigs() map[int64][]byte {
	if x != nil {
		return x.HtlcSigs
	}
	return nil
}

type PushHyperloopHtlcSigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushHyperloopHtlcSigResponse) Reset() {
	*x = PushHyperloopHtlcSigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHyperloopHtlcSigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHyperloopHtlcSigResponse) ProtoMessage() {}

func (x *PushHyperloopHtlcSigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHyperloopHtlcSigResponse.ProtoReflect.Descriptor instead.
func (*PushHyperloopHtlcSigResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{18}
}

type FetchHyperloopHtlcSigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
}

func (x *FetchHyperloopHtlcSigRequest) Reset() {
	*x = FetchHyperloopHtlcSigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopHtlcSigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopHtlcSigRequest) ProtoMessage() {}

func (x *FetchHyperloopHtlcSigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopHtlcSigRequest.ProtoReflect.Descriptor instead.
func (*FetchHyperloopHtlcSigRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{19}
}

func (x *FetchHyperloopHtlcSigRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

type FetchHyperloopHtlcSigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HtlcSigsByFees map[int64][]byte `protobuf:"bytes,1,rep,name=htlc_sigs_by_fees,json=htlcSigsByFees,proto3" json:"htlc_sigs_by_fees,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchHyperloopHtlcSigResponse) Reset() {
	*x = FetchHyperloopHtlcSigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopHtlcSigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopHtlcSigResponse) ProtoMessage() {}

func (x *FetchHyperloopHtlcSigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopHtlcSigResponse.ProtoReflect.Descriptor instead.
func (*FetchHyperloopHtlcSigResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{20}
}

func (x *FetchHyperloopHtlcSigResponse) GetHtlcSigsByFees() map[int64][]byte {
	if x != nil {
		return x.HtlcSigsByFees
	}
	return nil
}

type PushHyperloopPreimageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
	Preimage    []byte `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	SweepNonce  []byte `protobuf:"bytes,3,opt,name=sweep_nonce,json=sweepNonce,proto3" json:"sweep_nonce,omitempty"`
}

func (x *PushHyperloopPreimageRequest) Reset() {
	*x = PushHyperloopPreimageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHyperloopPreimageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHyperloopPreimageRequest) ProtoMessage() {}

func (x *PushHyperloopPreimageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHyperloopPreimageRequest.ProtoReflect.Descriptor instead.
func (*PushHyperloopPreimageRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{21}
}

func (x *PushHyperloopPreimageRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

func (x *PushHyperloopPreimageRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *PushHyperloopPreimageRequest) GetSweepNonce() []byte {
	if x != nil {
		return x.SweepNonce
	}
	return nil
}

type PushHyperloopPreimageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSweepNonce []byte `protobuf:"bytes,1,opt,name=server_sweep_nonce,json=serverSweepNonce,proto3" json:"server_sweep_nonce,omitempty"`
	SweepRawTx       []byte `protobuf:"bytes,2,opt,name=sweep_raw_tx,json=sweepRawTx,proto3" json:"sweep_raw_tx,omitempty"`
	SweepFeeRate     int64  `protobuf:"varint,3,opt,name=sweep_fee_rate,json=sweepFeeRate,proto3" json:"sweep_fee_rate,omitempty"`
}

func (x *PushHyperloopPreimageResponse) Reset() {
	*x = PushHyperloopPreimageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHyperloopPreimageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHyperloopPreimageResponse) ProtoMessage() {}

func (x *PushHyperloopPreimageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHyperloopPreimageResponse.ProtoReflect.Descriptor instead.
func (*PushHyperloopPreimageResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{22}
}

func (x *PushHyperloopPreimageResponse) GetServerSweepNonce() []byte {
	if x != nil {
		return x.ServerSweepNonce
	}
	return nil
}

func (x *PushHyperloopPreimageResponse) GetSweepRawTx() []byte {
	if x != nil {
		return x.SweepRawTx
	}
	return nil
}

func (x *PushHyperloopPreimageResponse) GetSweepFeeRate() int64 {
	if x != nil {
		return x.SweepFeeRate
	}
	return 0
}

type FetchHyperloopSweeplessSweepNonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
}

func (x *FetchHyperloopSweeplessSweepNonceRequest) Reset() {
	*x = FetchHyperloopSweeplessSweepNonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopSweeplessSweepNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopSweeplessSweepNonceRequest) ProtoMessage() {}

func (x *FetchHyperloopSweeplessSweepNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopSweeplessSweepNonceRequest.ProtoReflect.Descriptor instead.
func (*FetchHyperloopSweeplessSweepNonceRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{23}
}

func (x *FetchHyperloopSweeplessSweepNonceRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

type FetchHyperloopSweeplessSweepNonceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SweeplessSweepNonces [][]byte `protobuf:"bytes,1,rep,name=sweepless_sweep_nonces,json=sweeplessSweepNonces,proto3" json:"sweepless_sweep_nonces,omitempty"`
}

func (x *FetchHyperloopSweeplessSweepNonceResponse) Reset() {
	*x = FetchHyperloopSweeplessSweepNonceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchHyperloopSweeplessSweepNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchHyperloopSweeplessSweepNonceResponse) ProtoMessage() {}

func (x *FetchHyperloopSweeplessSweepNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchHyperloopSweeplessSweepNonceResponse.ProtoReflect.Descriptor instead.
func (*FetchHyperloopSweeplessSweepNonceResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{24}
}

func (x *FetchHyperloopSweeplessSweepNonceResponse) GetSweeplessSweepNonces() [][]byte {
	if x != nil {
		return x.SweeplessSweepNonces
	}
	return nil
}

type PushHyperloopSweeplessSweepSigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HyperloopId []byte `protobuf:"bytes,1,opt,name=hyperloop_id,json=hyperloopId,proto3" json:"hyperloop_id,omitempty"`
	SwapHash    []byte `protobuf:"bytes,2,opt,name=swap_hash,json=swapHash,proto3" json:"swap_hash,omitempty"`
	SweepSig    []byte `protobuf:"bytes,3,opt,name=sweep_sig,json=sweepSig,proto3" json:"sweep_sig,omitempty"`
}

func (x *PushHyperloopSweeplessSweepSigRequest) Reset() {
	*x = PushHyperloopSweeplessSweepSigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHyperloopSweeplessSweepSigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHyperloopSweeplessSweepSigRequest) ProtoMessage() {}

func (x *PushHyperloopSweeplessSweepSigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHyperloopSweeplessSweepSigRequest.ProtoReflect.Descriptor instead.
func (*PushHyperloopSweeplessSweepSigRequest) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{25}
}

func (x *PushHyperloopSweeplessSweepSigRequest) GetHyperloopId() []byte {
	if x != nil {
		return x.HyperloopId
	}
	return nil
}

func (x *PushHyperloopSweeplessSweepSigRequest) GetSwapHash() []byte {
	if x != nil {
		return x.SwapHash
	}
	return nil
}

func (x *PushHyperloopSweeplessSweepSigRequest) GetSweepSig() []byte {
	if x != nil {
		return x.SweepSig
	}
	return nil
}

type PushHyperloopSweeplessSweepSigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushHyperloopSweeplessSweepSigResponse) Reset() {
	*x = PushHyperloopSweeplessSweepSigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyperloop_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHyperloopSweeplessSweepSigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHyperloopSweeplessSweepSigResponse) ProtoMessage() {}

func (x *PushHyperloopSweeplessSweepSigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hyperloop_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHyperloopSweeplessSweepSigResponse.ProtoReflect.Descriptor instead.
func (*PushHyperloopSweeplessSweepSigResponse) Descriptor() ([]byte, []int) {
	return file_hyperloop_proto_rawDescGZIP(), []int{26}
}

var File_hyperloop_proto protoreflect.FileDescriptor

var file_hyperloop_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x22, 0x47, 0x0a, 0x22, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f,
	0x70, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x23, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x52, 0x17, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x22, 0x96, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x2b, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77,
	0x61, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6d, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x65, 0x65, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x77, 0x65,
	0x65, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x22, 0xd3, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x63, 0x6c, 0x74, 0x76, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x6c, 0x63,
	0x43, 0x6c, 0x74, 0x76, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x73, 0x76, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x43, 0x73, 0x76, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x21, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x4a,
	0x0a, 0x22, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x48, 0x74, 0x6c, 0x63, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x74,
	0x6c, 0x63, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x21, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x22, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x14, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x77, 0x65, 0x65, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x22, 0xf9, 0x01, 0x0a, 0x1e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x58, 0x0a, 0x0b, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f,
	0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x68, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x02,
	0x0a, 0x1f, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48,
	0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x74, 0x6c, 0x63,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x74,
	0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x0d, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74,
	0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x48, 0x74, 0x6c, 0x63, 0x52, 0x61, 0x77, 0x54, 0x78, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x68, 0x74, 0x6c, 0x63, 0x52, 0x61, 0x77, 0x54, 0x78, 0x6e, 0x73, 0x1a, 0x43,
	0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x48, 0x74, 0x6c, 0x63, 0x52, 0x61, 0x77, 0x54, 0x78,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x1f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x20,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74,
	0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6e, 0x0a, 0x13, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x73, 0x42, 0x79, 0x46, 0x65, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x68, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x46, 0x65, 0x65, 0x73,
	0x1a, 0x5f, 0x0a, 0x15, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79,
	0x46, 0x65, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xeb, 0x01, 0x0a, 0x1b, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x4f, 0x0a, 0x09, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63,
	0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x53,
	0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x68, 0x74, 0x6c, 0x63, 0x53, 0x69,
	0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x1e, 0x0a, 0x1c, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x41, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f,
	0x70, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x73, 0x69, 0x67,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x73,
	0x42, 0x79, 0x46, 0x65, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x68, 0x74, 0x6c,
	0x63, 0x53, 0x69, 0x67, 0x73, 0x42, 0x79, 0x46, 0x65, 0x65, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x48,
	0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x73, 0x42, 0x79, 0x46, 0x65, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e,
	0x0a, 0x1c, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x77, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x1d, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x77, 0x65, 0x65, 0x70,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x77, 0x65, 0x65, 0x70, 0x52, 0x61, 0x77, 0x54, 0x78,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x77, 0x65, 0x65, 0x70, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x4d, 0x0a, 0x28, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73,
	0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x29, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73,
	0x53, 0x77, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x14, 0x73, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65,
	0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x25, 0x50, 0x75, 0x73,
	0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c,
	0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x77, 0x65, 0x65, 0x70, 0x53, 0x69, 0x67, 0x22,
	0x28, 0x0a, 0x26, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x53, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xfd, 0x01, 0x0a, 0x0f, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x48, 0x54, 0x4c, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x53,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x48,
	0x54, 0x4c, 0x43, 0x5f, 0x53, 0x49, 0x47, 0x53, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53,
	0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53,
	0x57, 0x45, 0x45, 0x50, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x50, 0x5f, 0x53,
	0x49, 0x47, 0x53, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x57, 0x45, 0x45, 0x50, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x50, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x57, 0x45, 0x45, 0x50, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x59, 0x50, 0x45, 0x52, 0x4c, 0x4f, 0x4f, 0x50,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x32, 0xe0, 0x0a, 0x0a, 0x0f, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x7a, 0x0a,
	0x1b, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x12, 0x23, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74,
	0x6c, 0x63, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75,
	0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72,
	0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f,
	0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x27, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f,
	0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x28, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x73, 0x12, 0x24, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x53,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63,
	0x53, 0x69, 0x67, 0x73, 0x12, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c,
	0x63, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x74, 0x6c, 0x63, 0x53, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x21,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x77,
	0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x31, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c,
	0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x77, 0x65,
	0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x50, 0x75, 0x73,
	0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c,
	0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65, 0x70, 0x53, 0x69, 0x67, 0x12, 0x2e, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65,
	0x70, 0x53, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x53, 0x77, 0x65, 0x65, 0x70, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x77, 0x65, 0x65,
	0x70, 0x53, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2f, 0x73, 0x77,
	0x61, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_hyperloop_proto_rawDescOnce sync.Once
	file_hyperloop_proto_rawDescData = file_hyperloop_proto_rawDesc
)

func file_hyperloop_proto_rawDescGZIP() []byte {
	file_hyperloop_proto_rawDescOnce.Do(func() {
		file_hyperloop_proto_rawDescData = protoimpl.X.CompressGZIP(file_hyperloop_proto_rawDescData)
	})
	return file_hyperloop_proto_rawDescData
}

var file_hyperloop_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hyperloop_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_hyperloop_proto_goTypes = []interface{}{
	(HyperloopStatus)(0),                              // 0: looprpc.HyperloopStatus
	(*HyperloopNotificationStreamRequest)(nil),        // 1: looprpc.HyperloopNotificationStreamRequest
	(*HyperloopNotificationStreamResponse)(nil),       // 2: looprpc.HyperloopNotificationStreamResponse
	(*GetPendingHyperloopRequest)(nil),                // 3: looprpc.GetPendingHyperloopRequest
	(*GetPendingHyperloopResponse)(nil),               // 4: looprpc.GetPendingHyperloopResponse
	(*PendingHyperloop)(nil),                          // 5: looprpc.PendingHyperloop
	(*RegisterHyperloopRequest)(nil),                  // 6: looprpc.RegisterHyperloopRequest
	(*RegisterHyperloopResponse)(nil),                 // 7: looprpc.RegisterHyperloopResponse
	(*FetchHyperloopHtlcFeeRatesRequest)(nil),         // 8: looprpc.FetchHyperloopHtlcFeeRatesRequest
	(*FetchHyperloopHtlcFeeRatesResponse)(nil),        // 9: looprpc.FetchHyperloopHtlcFeeRatesResponse
	(*FetchHyperloopParticipantsRequest)(nil),         // 10: looprpc.FetchHyperloopParticipantsRequest
	(*FetchHyperloopParticipantsResponse)(nil),        // 11: looprpc.FetchHyperloopParticipantsResponse
	(*HyperloopParticipant)(nil),                      // 12: looprpc.HyperloopParticipant
	(*PushHyperloopHtlcNoncesRequest)(nil),            // 13: looprpc.PushHyperloopHtlcNoncesRequest
	(*PushHyperloopHtlcNoncesResponse)(nil),           // 14: looprpc.PushHyperloopHtlcNoncesResponse
	(*FetchHyperloopHtlcNoncesRequest)(nil),           // 15: looprpc.FetchHyperloopHtlcNoncesRequest
	(*ParticipantNonces)(nil),                         // 16: looprpc.ParticipantNonces
	(*FetchHyperloopHtlcNoncesResponse)(nil),          // 17: looprpc.FetchHyperloopHtlcNoncesResponse
	(*PushHyperloopHtlcSigRequest)(nil),               // 18: looprpc.PushHyperloopHtlcSigRequest
	(*PushHyperloopHtlcSigResponse)(nil),              // 19: looprpc.PushHyperloopHtlcSigResponse
	(*FetchHyperloopHtlcSigRequest)(nil),              // 20: looprpc.FetchHyperloopHtlcSigRequest
	(*FetchHyperloopHtlcSigResponse)(nil),             // 21: looprpc.FetchHyperloopHtlcSigResponse
	(*PushHyperloopPreimageRequest)(nil),              // 22: looprpc.PushHyperloopPreimageRequest
	(*PushHyperloopPreimageResponse)(nil),             // 23: looprpc.PushHyperloopPreimageResponse
	(*FetchHyperloopSweeplessSweepNonceRequest)(nil),  // 24: looprpc.FetchHyperloopSweeplessSweepNonceRequest
	(*FetchHyperloopSweeplessSweepNonceResponse)(nil), // 25: looprpc.FetchHyperloopSweeplessSweepNonceResponse
	(*PushHyperloopSweeplessSweepSigRequest)(nil),     // 26: looprpc.PushHyperloopSweeplessSweepSigRequest
	(*PushHyperloopSweeplessSweepSigResponse)(nil),    // 27: looprpc.PushHyperloopSweeplessSweepSigResponse
	nil, // 28: looprpc.PushHyperloopHtlcNoncesRequest.HtlcNoncesEntry
	nil, // 29: looprpc.PushHyperloopHtlcNoncesResponse.ServerHtlcNoncesEntry
	nil, // 30: looprpc.PushHyperloopHtlcNoncesResponse.HtlcRawTxnsEntry
	nil, // 31: looprpc.FetchHyperloopHtlcNoncesResponse.HtlcNoncesByFeesEntry
	nil, // 32: looprpc.PushHyperloopHtlcSigRequest.HtlcSigsEntry
	nil, // 33: looprpc.FetchHyperloopHtlcSigResponse.HtlcSigsByFeesEntry
}
var file_hyperloop_proto_depIdxs = []int32{
	0,  // 0: looprpc.HyperloopNotificationStreamResponse.status:type_name -> looprpc.HyperloopStatus
	5,  // 1: looprpc.GetPendingHyperloopResponse.pending_private_hyperloop:type_name -> looprpc.PendingHyperloop
	12, // 2: looprpc.FetchHyperloopParticipantsResponse.participants:type_name -> looprpc.HyperloopParticipant
	28, // 3: looprpc.PushHyperloopHtlcNoncesRequest.htlc_nonces:type_name -> looprpc.PushHyperloopHtlcNoncesRequest.HtlcNoncesEntry
	29, // 4: looprpc.PushHyperloopHtlcNoncesResponse.server_htlc_nonces:type_name -> looprpc.PushHyperloopHtlcNoncesResponse.ServerHtlcNoncesEntry
	30, // 5: looprpc.PushHyperloopHtlcNoncesResponse.htlc_raw_txns:type_name -> looprpc.PushHyperloopHtlcNoncesResponse.HtlcRawTxnsEntry
	31, // 6: looprpc.FetchHyperloopHtlcNoncesResponse.htlc_nonces_by_fees:type_name -> looprpc.FetchHyperloopHtlcNoncesResponse.HtlcNoncesByFeesEntry
	32, // 7: looprpc.PushHyperloopHtlcSigRequest.htlc_sigs:type_name -> looprpc.PushHyperloopHtlcSigRequest.HtlcSigsEntry
	33, // 8: looprpc.FetchHyperloopHtlcSigResponse.htlc_sigs_by_fees:type_name -> looprpc.FetchHyperloopHtlcSigResponse.HtlcSigsByFeesEntry
	16, // 9: looprpc.FetchHyperloopHtlcNoncesResponse.HtlcNoncesByFeesEntry.value:type_name -> looprpc.ParticipantNonces
	1,  // 10: looprpc.HyperloopServer.HyperloopNotificationStream:input_type -> looprpc.HyperloopNotificationStreamRequest
	3,  // 11: looprpc.HyperloopServer.GetPendingHyperloop:input_type -> looprpc.GetPendingHyperloopRequest
	6,  // 12: looprpc.HyperloopServer.RegisterHyperloop:input_type -> looprpc.RegisterHyperloopRequest
	8,  // 13: looprpc.HyperloopServer.FetchHyperloopHtlcFeeRates:input_type -> looprpc.FetchHyperloopHtlcFeeRatesRequest
	10, // 14: looprpc.HyperloopServer.FetchHyperloopParticipants:input_type -> looprpc.FetchHyperloopParticipantsRequest
	13, // 15: looprpc.HyperloopServer.PushHyperloopHtlcNonces:input_type -> looprpc.PushHyperloopHtlcNoncesRequest
	15, // 16: looprpc.HyperloopServer.FetchHyperloopHtlcNonces:input_type -> looprpc.FetchHyperloopHtlcNoncesRequest
	18, // 17: looprpc.HyperloopServer.PushHyperloopHtlcSigs:input_type -> looprpc.PushHyperloopHtlcSigRequest
	20, // 18: looprpc.HyperloopServer.FetchHyperloopHtlcSigs:input_type -> looprpc.FetchHyperloopHtlcSigRequest
	22, // 19: looprpc.HyperloopServer.PushHyperloopPreimage:input_type -> looprpc.PushHyperloopPreimageRequest
	24, // 20: looprpc.HyperloopServer.FetchHyperloopSweeplessSweepNonce:input_type -> looprpc.FetchHyperloopSweeplessSweepNonceRequest
	26, // 21: looprpc.HyperloopServer.PushHyperloopSweeplessSweepSig:input_type -> looprpc.PushHyperloopSweeplessSweepSigRequest
	2,  // 22: looprpc.HyperloopServer.HyperloopNotificationStream:output_type -> looprpc.HyperloopNotificationStreamResponse
	4,  // 23: looprpc.HyperloopServer.GetPendingHyperloop:output_type -> looprpc.GetPendingHyperloopResponse
	7,  // 24: looprpc.HyperloopServer.RegisterHyperloop:output_type -> looprpc.RegisterHyperloopResponse
	9,  // 25: looprpc.HyperloopServer.FetchHyperloopHtlcFeeRates:output_type -> looprpc.FetchHyperloopHtlcFeeRatesResponse
	11, // 26: looprpc.HyperloopServer.FetchHyperloopParticipants:output_type -> looprpc.FetchHyperloopParticipantsResponse
	14, // 27: looprpc.HyperloopServer.PushHyperloopHtlcNonces:output_type -> looprpc.PushHyperloopHtlcNoncesResponse
	17, // 28: looprpc.HyperloopServer.FetchHyperloopHtlcNonces:output_type -> looprpc.FetchHyperloopHtlcNoncesResponse
	19, // 29: looprpc.HyperloopServer.PushHyperloopHtlcSigs:output_type -> looprpc.PushHyperloopHtlcSigResponse
	21, // 30: looprpc.HyperloopServer.FetchHyperloopHtlcSigs:output_type -> looprpc.FetchHyperloopHtlcSigResponse
	23, // 31: looprpc.HyperloopServer.PushHyperloopPreimage:output_type -> looprpc.PushHyperloopPreimageResponse
	25, // 32: looprpc.HyperloopServer.FetchHyperloopSweeplessSweepNonce:output_type -> looprpc.FetchHyperloopSweeplessSweepNonceResponse
	27, // 33: looprpc.HyperloopServer.PushHyperloopSweeplessSweepSig:output_type -> looprpc.PushHyperloopSweeplessSweepSigResponse
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_hyperloop_proto_init() }
func file_hyperloop_proto_init() {
	if File_hyperloop_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hyperloop_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopNotificationStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopNotificationStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingHyperloopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingHyperloopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingHyperloop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterHyperloopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterHyperloopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopHtlcFeeRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopHtlcFeeRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopParticipantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopParticipantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHyperloopHtlcNoncesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHyperloopHtlcNoncesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopHtlcNoncesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantNonces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopHtlcNoncesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHyperloopHtlcSigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHyperloopHtlcSigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopHtlcSigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopHtlcSigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHyperloopPreimageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHyperloopPreimageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopSweeplessSweepNonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchHyperloopSweeplessSweepNonceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHyperloopSweeplessSweepSigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyperloop_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHyperloopSweeplessSweepSigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hyperloop_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hyperloop_proto_goTypes,
		DependencyIndexes: file_hyperloop_proto_depIdxs,
		EnumInfos:         file_hyperloop_proto_enumTypes,
		MessageInfos:      file_hyperloop_proto_msgTypes,
	}.Build()
	File_hyperloop_proto = out.File
	file_hyperloop_proto_rawDesc = nil
	file_hyperloop_proto_goTypes = nil
	file_hyperloop_proto_depIdxs = nil
}
