// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package swapserverrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetDepositServiceClient is the client API for AssetDepositService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetDepositServiceClient interface {
	// NewAssetDeposit creates a new asset deposit address.
	NewAssetDeposit(ctx context.Context, in *NewAssetDepositServerReq, opts ...grpc.CallOption) (*NewAssetDepositServerRes, error)
	// WithdrawAssetDeposit withdraws asset deposits to the user's wallet.
	WithdrawAssetDeposits(ctx context.Context, in *WithdrawAssetDepositsServerReq, opts ...grpc.CallOption) (*WithdrawAssetDepositsServerRes, error)
	// PushHtlcSigs pushes a MuSig2 partial signatures to the server spending
	// one ore more deposits to a zero fee HTLC.
	PushAssetDepositHtlcSigs(ctx context.Context, in *PushAssetDepositHtlcSigsReq, opts ...grpc.CallOption) (*PushAssetDepositHtlcSigsRes, error)
	// PushKeys pushes (ie reveals) the private keys of one ore more deposits to
	// the server.
	PushAssetDepositKeys(ctx context.Context, in *PushAssetDepositKeysReq, opts ...grpc.CallOption) (*PushAssetDepositKeysRes, error)
}

type assetDepositServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetDepositServiceClient(cc grpc.ClientConnInterface) AssetDepositServiceClient {
	return &assetDepositServiceClient{cc}
}

func (c *assetDepositServiceClient) NewAssetDeposit(ctx context.Context, in *NewAssetDepositServerReq, opts ...grpc.CallOption) (*NewAssetDepositServerRes, error) {
	out := new(NewAssetDepositServerRes)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositService/NewAssetDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetDepositServiceClient) WithdrawAssetDeposits(ctx context.Context, in *WithdrawAssetDepositsServerReq, opts ...grpc.CallOption) (*WithdrawAssetDepositsServerRes, error) {
	out := new(WithdrawAssetDepositsServerRes)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositService/WithdrawAssetDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetDepositServiceClient) PushAssetDepositHtlcSigs(ctx context.Context, in *PushAssetDepositHtlcSigsReq, opts ...grpc.CallOption) (*PushAssetDepositHtlcSigsRes, error) {
	out := new(PushAssetDepositHtlcSigsRes)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositService/PushAssetDepositHtlcSigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetDepositServiceClient) PushAssetDepositKeys(ctx context.Context, in *PushAssetDepositKeysReq, opts ...grpc.CallOption) (*PushAssetDepositKeysRes, error) {
	out := new(PushAssetDepositKeysRes)
	err := c.cc.Invoke(ctx, "/looprpc.AssetDepositService/PushAssetDepositKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetDepositServiceServer is the server API for AssetDepositService service.
// All implementations must embed UnimplementedAssetDepositServiceServer
// for forward compatibility
type AssetDepositServiceServer interface {
	// NewAssetDeposit creates a new asset deposit address.
	NewAssetDeposit(context.Context, *NewAssetDepositServerReq) (*NewAssetDepositServerRes, error)
	// WithdrawAssetDeposit withdraws asset deposits to the user's wallet.
	WithdrawAssetDeposits(context.Context, *WithdrawAssetDepositsServerReq) (*WithdrawAssetDepositsServerRes, error)
	// PushHtlcSigs pushes a MuSig2 partial signatures to the server spending
	// one ore more deposits to a zero fee HTLC.
	PushAssetDepositHtlcSigs(context.Context, *PushAssetDepositHtlcSigsReq) (*PushAssetDepositHtlcSigsRes, error)
	// PushKeys pushes (ie reveals) the private keys of one ore more deposits to
	// the server.
	PushAssetDepositKeys(context.Context, *PushAssetDepositKeysReq) (*PushAssetDepositKeysRes, error)
	mustEmbedUnimplementedAssetDepositServiceServer()
}

// UnimplementedAssetDepositServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssetDepositServiceServer struct {
}

func (UnimplementedAssetDepositServiceServer) NewAssetDeposit(context.Context, *NewAssetDepositServerReq) (*NewAssetDepositServerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAssetDeposit not implemented")
}
func (UnimplementedAssetDepositServiceServer) WithdrawAssetDeposits(context.Context, *WithdrawAssetDepositsServerReq) (*WithdrawAssetDepositsServerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawAssetDeposits not implemented")
}
func (UnimplementedAssetDepositServiceServer) PushAssetDepositHtlcSigs(context.Context, *PushAssetDepositHtlcSigsReq) (*PushAssetDepositHtlcSigsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAssetDepositHtlcSigs not implemented")
}
func (UnimplementedAssetDepositServiceServer) PushAssetDepositKeys(context.Context, *PushAssetDepositKeysReq) (*PushAssetDepositKeysRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAssetDepositKeys not implemented")
}
func (UnimplementedAssetDepositServiceServer) mustEmbedUnimplementedAssetDepositServiceServer() {}

// UnsafeAssetDepositServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetDepositServiceServer will
// result in compilation errors.
type UnsafeAssetDepositServiceServer interface {
	mustEmbedUnimplementedAssetDepositServiceServer()
}

func RegisterAssetDepositServiceServer(s grpc.ServiceRegistrar, srv AssetDepositServiceServer) {
	s.RegisterService(&AssetDepositService_ServiceDesc, srv)
}

func _AssetDepositService_NewAssetDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAssetDepositServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositServiceServer).NewAssetDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositService/NewAssetDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositServiceServer).NewAssetDeposit(ctx, req.(*NewAssetDepositServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetDepositService_WithdrawAssetDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawAssetDepositsServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositServiceServer).WithdrawAssetDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositService/WithdrawAssetDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositServiceServer).WithdrawAssetDeposits(ctx, req.(*WithdrawAssetDepositsServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetDepositService_PushAssetDepositHtlcSigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushAssetDepositHtlcSigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositServiceServer).PushAssetDepositHtlcSigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositService/PushAssetDepositHtlcSigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositServiceServer).PushAssetDepositHtlcSigs(ctx, req.(*PushAssetDepositHtlcSigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetDepositService_PushAssetDepositKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushAssetDepositKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetDepositServiceServer).PushAssetDepositKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/looprpc.AssetDepositService/PushAssetDepositKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetDepositServiceServer).PushAssetDepositKeys(ctx, req.(*PushAssetDepositKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetDepositService_ServiceDesc is the grpc.ServiceDesc for AssetDepositService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetDepositService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "looprpc.AssetDepositService",
	HandlerType: (*AssetDepositServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAssetDeposit",
			Handler:    _AssetDepositService_NewAssetDeposit_Handler,
		},
		{
			MethodName: "WithdrawAssetDeposits",
			Handler:    _AssetDepositService_WithdrawAssetDeposits_Handler,
		},
		{
			MethodName: "PushAssetDepositHtlcSigs",
			Handler:    _AssetDepositService_PushAssetDepositHtlcSigs_Handler,
		},
		{
			MethodName: "PushAssetDepositKeys",
			Handler:    _AssetDepositService_PushAssetDepositKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asset_deposit.proto",
}
